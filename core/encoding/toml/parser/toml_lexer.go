// Code generated from Toml.g4 by ANTLR 4.12.0. DO NOT EDIT.

package parser

import (
	"fmt"
	"sync"
	"unicode"

	antlr "github.com/wrmsr/bane/core/antlr/runtime"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type TomlLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var tomllexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func tomllexerLexerInit() {
	staticData := &tomllexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'='", "'.'", "'['", "']'", "','", "'{'", "'}'", "'[['", "']]'",
	}
	staticData.symbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "WS", "NL", "COMMENT", "BOOLEAN",
		"BASIC_STRING", "ML_BASIC_STRING", "LITERAL_STRING", "ML_LITERAL_STRING",
		"FLOAT", "INF", "NAN", "DEC_INT", "HEX_INT", "OCT_INT", "BIN_INT", "OFFSET_DATE_TIME",
		"LOCAL_DATE_TIME", "LOCAL_DATE", "LOCAL_TIME", "UNQUOTED_KEY",
	}
	staticData.ruleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"WS", "NL", "COMMENT", "DIGIT", "ALPHA", "BOOLEAN", "ESC", "ML_ESC",
		"UNICODE", "EX_UNICODE", "BASIC_STRING", "ML_BASIC_STRING", "LITERAL_STRING",
		"ML_LITERAL_STRING", "EXP", "ZERO_PREFIXABLE_INT", "FRAC", "FLOAT",
		"INF", "NAN", "HEX_DIGIT", "DIGIT_1_9", "DIGIT_0_7", "DIGIT_0_1", "DEC_INT",
		"HEX_INT", "OCT_INT", "BIN_INT", "YEAR", "MONTH", "DAY", "DELIM", "HOUR",
		"MINUTE", "SECOND", "SECFRAC", "NUMOFFSET", "OFFSET", "PARTIAL_TIME",
		"FULL_DATE", "FULL_TIME", "OFFSET_DATE_TIME", "LOCAL_DATE_TIME", "LOCAL_DATE",
		"LOCAL_TIME", "UNQUOTED_KEY",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 29, 413, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1,
		2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1,
		8, 1, 8, 1, 8, 1, 9, 4, 9, 133, 8, 9, 11, 9, 12, 9, 134, 1, 9, 1, 9, 1,
		10, 3, 10, 140, 8, 10, 1, 10, 4, 10, 143, 8, 10, 11, 10, 12, 10, 144, 1,
		11, 1, 11, 5, 11, 149, 8, 11, 10, 11, 12, 11, 152, 9, 11, 1, 12, 1, 12,
		1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1,
		14, 3, 14, 167, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 173, 8, 15, 1,
		16, 1, 16, 3, 16, 177, 8, 16, 1, 16, 1, 16, 3, 16, 181, 8, 16, 1, 17, 1,
		17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18,
		1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 5, 19, 202, 8, 19, 10,
		19, 12, 19, 205, 9, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20,
		1, 20, 5, 20, 215, 8, 20, 10, 20, 12, 20, 218, 9, 20, 1, 20, 1, 20, 1,
		20, 1, 20, 1, 21, 1, 21, 5, 21, 226, 8, 21, 10, 21, 12, 21, 229, 9, 21,
		1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 5, 22, 238, 8, 22, 10,
		22, 12, 22, 241, 9, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23,
		1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 254, 8, 24, 10, 24, 12, 24, 257, 9,
		24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 266, 8, 26,
		3, 26, 268, 8, 26, 1, 27, 3, 27, 271, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		1, 28, 3, 28, 278, 8, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 3,
		29, 286, 8, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 32, 1, 32, 1, 33, 3, 33,
		295, 8, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 4, 33, 302, 8, 33, 11, 33,
		12, 33, 303, 3, 33, 306, 8, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34,
		1, 34, 5, 34, 315, 8, 34, 10, 34, 12, 34, 318, 9, 34, 1, 35, 1, 35, 1,
		35, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 327, 8, 35, 1, 36, 1, 36, 1, 36,
		1, 36, 1, 36, 1, 36, 1, 36, 5, 36, 336, 8, 36, 10, 36, 12, 36, 339, 9,
		36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39,
		1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 43, 1,
		43, 1, 43, 1, 44, 1, 44, 4, 44, 365, 8, 44, 11, 44, 12, 44, 366, 1, 45,
		1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 3, 46, 376, 8, 46, 1, 47, 1,
		47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 384, 8, 47, 1, 48, 1, 48, 1, 48,
		1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1,
		51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54,
		4, 54, 410, 8, 54, 11, 54, 12, 54, 411, 4, 203, 216, 227, 239, 0, 55, 1,
		1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11,
		23, 12, 25, 0, 27, 0, 29, 13, 31, 0, 33, 0, 35, 0, 37, 0, 39, 14, 41, 15,
		43, 16, 45, 17, 47, 0, 49, 0, 51, 0, 53, 18, 55, 19, 57, 20, 59, 0, 61,
		0, 63, 0, 65, 0, 67, 21, 69, 22, 71, 23, 73, 24, 75, 0, 77, 0, 79, 0, 81,
		0, 83, 0, 85, 0, 87, 0, 89, 0, 91, 0, 93, 0, 95, 0, 97, 0, 99, 0, 101,
		25, 103, 26, 105, 27, 107, 28, 109, 29, 1, 0, 16, 2, 0, 9, 9, 32, 32, 1,
		0, 10, 10, 1, 0, 48, 57, 2, 0, 65, 90, 97, 122, 8, 0, 34, 34, 47, 47, 92,
		92, 98, 98, 102, 102, 110, 110, 114, 114, 116, 116, 3, 0, 10, 10, 34, 34,
		92, 92, 2, 0, 34, 34, 92, 92, 2, 0, 10, 10, 39, 39, 2, 0, 69, 69, 101,
		101, 2, 0, 43, 43, 45, 45, 1, 0, 65, 70, 1, 0, 49, 57, 1, 0, 48, 55, 1,
		0, 48, 49, 2, 0, 84, 84, 116, 116, 2, 0, 45, 45, 95, 95, 423, 0, 1, 1,
		0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1,
		0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17,
		1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0,
		29, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0,
		0, 45, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0,
		0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0,
		0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107,
		1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 1, 111, 1, 0, 0, 0, 3, 113, 1, 0, 0, 0,
		5, 115, 1, 0, 0, 0, 7, 117, 1, 0, 0, 0, 9, 119, 1, 0, 0, 0, 11, 121, 1,
		0, 0, 0, 13, 123, 1, 0, 0, 0, 15, 125, 1, 0, 0, 0, 17, 128, 1, 0, 0, 0,
		19, 132, 1, 0, 0, 0, 21, 142, 1, 0, 0, 0, 23, 146, 1, 0, 0, 0, 25, 153,
		1, 0, 0, 0, 27, 155, 1, 0, 0, 0, 29, 166, 1, 0, 0, 0, 31, 168, 1, 0, 0,
		0, 33, 180, 1, 0, 0, 0, 35, 182, 1, 0, 0, 0, 37, 188, 1, 0, 0, 0, 39, 198,
		1, 0, 0, 0, 41, 208, 1, 0, 0, 0, 43, 223, 1, 0, 0, 0, 45, 232, 1, 0, 0,
		0, 47, 246, 1, 0, 0, 0, 49, 249, 1, 0, 0, 0, 51, 258, 1, 0, 0, 0, 53, 261,
		1, 0, 0, 0, 55, 270, 1, 0, 0, 0, 57, 277, 1, 0, 0, 0, 59, 285, 1, 0, 0,
		0, 61, 287, 1, 0, 0, 0, 63, 289, 1, 0, 0, 0, 65, 291, 1, 0, 0, 0, 67, 294,
		1, 0, 0, 0, 69, 307, 1, 0, 0, 0, 71, 319, 1, 0, 0, 0, 73, 328, 1, 0, 0,
		0, 75, 340, 1, 0, 0, 0, 77, 345, 1, 0, 0, 0, 79, 348, 1, 0, 0, 0, 81, 351,
		1, 0, 0, 0, 83, 353, 1, 0, 0, 0, 85, 356, 1, 0, 0, 0, 87, 359, 1, 0, 0,
		0, 89, 362, 1, 0, 0, 0, 91, 368, 1, 0, 0, 0, 93, 375, 1, 0, 0, 0, 95, 377,
		1, 0, 0, 0, 97, 385, 1, 0, 0, 0, 99, 391, 1, 0, 0, 0, 101, 394, 1, 0, 0,
		0, 103, 398, 1, 0, 0, 0, 105, 402, 1, 0, 0, 0, 107, 404, 1, 0, 0, 0, 109,
		409, 1, 0, 0, 0, 111, 112, 5, 61, 0, 0, 112, 2, 1, 0, 0, 0, 113, 114, 5,
		46, 0, 0, 114, 4, 1, 0, 0, 0, 115, 116, 5, 91, 0, 0, 116, 6, 1, 0, 0, 0,
		117, 118, 5, 93, 0, 0, 118, 8, 1, 0, 0, 0, 119, 120, 5, 44, 0, 0, 120,
		10, 1, 0, 0, 0, 121, 122, 5, 123, 0, 0, 122, 12, 1, 0, 0, 0, 123, 124,
		5, 125, 0, 0, 124, 14, 1, 0, 0, 0, 125, 126, 5, 91, 0, 0, 126, 127, 5,
		91, 0, 0, 127, 16, 1, 0, 0, 0, 128, 129, 5, 93, 0, 0, 129, 130, 5, 93,
		0, 0, 130, 18, 1, 0, 0, 0, 131, 133, 7, 0, 0, 0, 132, 131, 1, 0, 0, 0,
		133, 134, 1, 0, 0, 0, 134, 132, 1, 0, 0, 0, 134, 135, 1, 0, 0, 0, 135,
		136, 1, 0, 0, 0, 136, 137, 6, 9, 0, 0, 137, 20, 1, 0, 0, 0, 138, 140, 5,
		13, 0, 0, 139, 138, 1, 0, 0, 0, 139, 140, 1, 0, 0, 0, 140, 141, 1, 0, 0,
		0, 141, 143, 5, 10, 0, 0, 142, 139, 1, 0, 0, 0, 143, 144, 1, 0, 0, 0, 144,
		142, 1, 0, 0, 0, 144, 145, 1, 0, 0, 0, 145, 22, 1, 0, 0, 0, 146, 150, 5,
		35, 0, 0, 147, 149, 8, 1, 0, 0, 148, 147, 1, 0, 0, 0, 149, 152, 1, 0, 0,
		0, 150, 148, 1, 0, 0, 0, 150, 151, 1, 0, 0, 0, 151, 24, 1, 0, 0, 0, 152,
		150, 1, 0, 0, 0, 153, 154, 7, 2, 0, 0, 154, 26, 1, 0, 0, 0, 155, 156, 7,
		3, 0, 0, 156, 28, 1, 0, 0, 0, 157, 158, 5, 116, 0, 0, 158, 159, 5, 114,
		0, 0, 159, 160, 5, 117, 0, 0, 160, 167, 5, 101, 0, 0, 161, 162, 5, 102,
		0, 0, 162, 163, 5, 97, 0, 0, 163, 164, 5, 108, 0, 0, 164, 165, 5, 115,
		0, 0, 165, 167, 5, 101, 0, 0, 166, 157, 1, 0, 0, 0, 166, 161, 1, 0, 0,
		0, 167, 30, 1, 0, 0, 0, 168, 172, 5, 92, 0, 0, 169, 173, 7, 4, 0, 0, 170,
		173, 3, 35, 17, 0, 171, 173, 3, 37, 18, 0, 172, 169, 1, 0, 0, 0, 172, 170,
		1, 0, 0, 0, 172, 171, 1, 0, 0, 0, 173, 32, 1, 0, 0, 0, 174, 176, 5, 92,
		0, 0, 175, 177, 5, 13, 0, 0, 176, 175, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0,
		177, 178, 1, 0, 0, 0, 178, 181, 5, 10, 0, 0, 179, 181, 3, 31, 15, 0, 180,
		174, 1, 0, 0, 0, 180, 179, 1, 0, 0, 0, 181, 34, 1, 0, 0, 0, 182, 183, 5,
		117, 0, 0, 183, 184, 3, 59, 29, 0, 184, 185, 3, 59, 29, 0, 185, 186, 3,
		59, 29, 0, 186, 187, 3, 59, 29, 0, 187, 36, 1, 0, 0, 0, 188, 189, 5, 85,
		0, 0, 189, 190, 3, 59, 29, 0, 190, 191, 3, 59, 29, 0, 191, 192, 3, 59,
		29, 0, 192, 193, 3, 59, 29, 0, 193, 194, 3, 59, 29, 0, 194, 195, 3, 59,
		29, 0, 195, 196, 3, 59, 29, 0, 196, 197, 3, 59, 29, 0, 197, 38, 1, 0, 0,
		0, 198, 203, 5, 34, 0, 0, 199, 202, 3, 31, 15, 0, 200, 202, 8, 5, 0, 0,
		201, 199, 1, 0, 0, 0, 201, 200, 1, 0, 0, 0, 202, 205, 1, 0, 0, 0, 203,
		204, 1, 0, 0, 0, 203, 201, 1, 0, 0, 0, 204, 206, 1, 0, 0, 0, 205, 203,
		1, 0, 0, 0, 206, 207, 5, 34, 0, 0, 207, 40, 1, 0, 0, 0, 208, 209, 5, 34,
		0, 0, 209, 210, 5, 34, 0, 0, 210, 211, 5, 34, 0, 0, 211, 216, 1, 0, 0,
		0, 212, 215, 3, 33, 16, 0, 213, 215, 8, 6, 0, 0, 214, 212, 1, 0, 0, 0,
		214, 213, 1, 0, 0, 0, 215, 218, 1, 0, 0, 0, 216, 217, 1, 0, 0, 0, 216,
		214, 1, 0, 0, 0, 217, 219, 1, 0, 0, 0, 218, 216, 1, 0, 0, 0, 219, 220,
		5, 34, 0, 0, 220, 221, 5, 34, 0, 0, 221, 222, 5, 34, 0, 0, 222, 42, 1,
		0, 0, 0, 223, 227, 5, 39, 0, 0, 224, 226, 8, 7, 0, 0, 225, 224, 1, 0, 0,
		0, 226, 229, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 227, 225, 1, 0, 0, 0, 228,
		230, 1, 0, 0, 0, 229, 227, 1, 0, 0, 0, 230, 231, 5, 39, 0, 0, 231, 44,
		1, 0, 0, 0, 232, 233, 5, 39, 0, 0, 233, 234, 5, 39, 0, 0, 234, 235, 5,
		39, 0, 0, 235, 239, 1, 0, 0, 0, 236, 238, 9, 0, 0, 0, 237, 236, 1, 0, 0,
		0, 238, 241, 1, 0, 0, 0, 239, 240, 1, 0, 0, 0, 239, 237, 1, 0, 0, 0, 240,
		242, 1, 0, 0, 0, 241, 239, 1, 0, 0, 0, 242, 243, 5, 39, 0, 0, 243, 244,
		5, 39, 0, 0, 244, 245, 5, 39, 0, 0, 245, 46, 1, 0, 0, 0, 246, 247, 7, 8,
		0, 0, 247, 248, 3, 67, 33, 0, 248, 48, 1, 0, 0, 0, 249, 255, 3, 25, 12,
		0, 250, 254, 3, 25, 12, 0, 251, 252, 5, 95, 0, 0, 252, 254, 3, 25, 12,
		0, 253, 250, 1, 0, 0, 0, 253, 251, 1, 0, 0, 0, 254, 257, 1, 0, 0, 0, 255,
		253, 1, 0, 0, 0, 255, 256, 1, 0, 0, 0, 256, 50, 1, 0, 0, 0, 257, 255, 1,
		0, 0, 0, 258, 259, 5, 46, 0, 0, 259, 260, 3, 49, 24, 0, 260, 52, 1, 0,
		0, 0, 261, 267, 3, 67, 33, 0, 262, 268, 3, 47, 23, 0, 263, 265, 3, 51,
		25, 0, 264, 266, 3, 47, 23, 0, 265, 264, 1, 0, 0, 0, 265, 266, 1, 0, 0,
		0, 266, 268, 1, 0, 0, 0, 267, 262, 1, 0, 0, 0, 267, 263, 1, 0, 0, 0, 268,
		54, 1, 0, 0, 0, 269, 271, 7, 9, 0, 0, 270, 269, 1, 0, 0, 0, 270, 271, 1,
		0, 0, 0, 271, 272, 1, 0, 0, 0, 272, 273, 5, 105, 0, 0, 273, 274, 5, 110,
		0, 0, 274, 275, 5, 102, 0, 0, 275, 56, 1, 0, 0, 0, 276, 278, 7, 9, 0, 0,
		277, 276, 1, 0, 0, 0, 277, 278, 1, 0, 0, 0, 278, 279, 1, 0, 0, 0, 279,
		280, 5, 110, 0, 0, 280, 281, 5, 97, 0, 0, 281, 282, 5, 110, 0, 0, 282,
		58, 1, 0, 0, 0, 283, 286, 7, 10, 0, 0, 284, 286, 3, 25, 12, 0, 285, 283,
		1, 0, 0, 0, 285, 284, 1, 0, 0, 0, 286, 60, 1, 0, 0, 0, 287, 288, 7, 11,
		0, 0, 288, 62, 1, 0, 0, 0, 289, 290, 7, 12, 0, 0, 290, 64, 1, 0, 0, 0,
		291, 292, 7, 13, 0, 0, 292, 66, 1, 0, 0, 0, 293, 295, 7, 9, 0, 0, 294,
		293, 1, 0, 0, 0, 294, 295, 1, 0, 0, 0, 295, 305, 1, 0, 0, 0, 296, 306,
		3, 25, 12, 0, 297, 301, 3, 61, 30, 0, 298, 302, 3, 25, 12, 0, 299, 300,
		5, 95, 0, 0, 300, 302, 3, 25, 12, 0, 301, 298, 1, 0, 0, 0, 301, 299, 1,
		0, 0, 0, 302, 303, 1, 0, 0, 0, 303, 301, 1, 0, 0, 0, 303, 304, 1, 0, 0,
		0, 304, 306, 1, 0, 0, 0, 305, 296, 1, 0, 0, 0, 305, 297, 1, 0, 0, 0, 306,
		68, 1, 0, 0, 0, 307, 308, 5, 48, 0, 0, 308, 309, 5, 120, 0, 0, 309, 310,
		1, 0, 0, 0, 310, 316, 3, 59, 29, 0, 311, 315, 3, 59, 29, 0, 312, 313, 5,
		95, 0, 0, 313, 315, 3, 59, 29, 0, 314, 311, 1, 0, 0, 0, 314, 312, 1, 0,
		0, 0, 315, 318, 1, 0, 0, 0, 316, 314, 1, 0, 0, 0, 316, 317, 1, 0, 0, 0,
		317, 70, 1, 0, 0, 0, 318, 316, 1, 0, 0, 0, 319, 320, 5, 48, 0, 0, 320,
		321, 5, 111, 0, 0, 321, 322, 1, 0, 0, 0, 322, 326, 3, 63, 31, 0, 323, 327,
		3, 63, 31, 0, 324, 325, 5, 95, 0, 0, 325, 327, 3, 63, 31, 0, 326, 323,
		1, 0, 0, 0, 326, 324, 1, 0, 0, 0, 327, 72, 1, 0, 0, 0, 328, 329, 5, 48,
		0, 0, 329, 330, 5, 98, 0, 0, 330, 331, 1, 0, 0, 0, 331, 337, 3, 65, 32,
		0, 332, 336, 3, 65, 32, 0, 333, 334, 5, 95, 0, 0, 334, 336, 3, 65, 32,
		0, 335, 332, 1, 0, 0, 0, 335, 333, 1, 0, 0, 0, 336, 339, 1, 0, 0, 0, 337,
		335, 1, 0, 0, 0, 337, 338, 1, 0, 0, 0, 338, 74, 1, 0, 0, 0, 339, 337, 1,
		0, 0, 0, 340, 341, 3, 25, 12, 0, 341, 342, 3, 25, 12, 0, 342, 343, 3, 25,
		12, 0, 343, 344, 3, 25, 12, 0, 344, 76, 1, 0, 0, 0, 345, 346, 3, 25, 12,
		0, 346, 347, 3, 25, 12, 0, 347, 78, 1, 0, 0, 0, 348, 349, 3, 25, 12, 0,
		349, 350, 3, 25, 12, 0, 350, 80, 1, 0, 0, 0, 351, 352, 7, 14, 0, 0, 352,
		82, 1, 0, 0, 0, 353, 354, 3, 25, 12, 0, 354, 355, 3, 25, 12, 0, 355, 84,
		1, 0, 0, 0, 356, 357, 3, 25, 12, 0, 357, 358, 3, 25, 12, 0, 358, 86, 1,
		0, 0, 0, 359, 360, 3, 25, 12, 0, 360, 361, 3, 25, 12, 0, 361, 88, 1, 0,
		0, 0, 362, 364, 5, 46, 0, 0, 363, 365, 3, 25, 12, 0, 364, 363, 1, 0, 0,
		0, 365, 366, 1, 0, 0, 0, 366, 364, 1, 0, 0, 0, 366, 367, 1, 0, 0, 0, 367,
		90, 1, 0, 0, 0, 368, 369, 7, 9, 0, 0, 369, 370, 3, 83, 41, 0, 370, 371,
		5, 58, 0, 0, 371, 372, 3, 85, 42, 0, 372, 92, 1, 0, 0, 0, 373, 376, 5,
		90, 0, 0, 374, 376, 3, 91, 45, 0, 375, 373, 1, 0, 0, 0, 375, 374, 1, 0,
		0, 0, 376, 94, 1, 0, 0, 0, 377, 378, 3, 83, 41, 0, 378, 379, 5, 58, 0,
		0, 379, 380, 3, 85, 42, 0, 380, 381, 5, 58, 0, 0, 381, 383, 3, 87, 43,
		0, 382, 384, 3, 89, 44, 0, 383, 382, 1, 0, 0, 0, 383, 384, 1, 0, 0, 0,
		384, 96, 1, 0, 0, 0, 385, 386, 3, 75, 37, 0, 386, 387, 5, 45, 0, 0, 387,
		388, 3, 77, 38, 0, 388, 389, 5, 45, 0, 0, 389, 390, 3, 79, 39, 0, 390,
		98, 1, 0, 0, 0, 391, 392, 3, 95, 47, 0, 392, 393, 3, 93, 46, 0, 393, 100,
		1, 0, 0, 0, 394, 395, 3, 97, 48, 0, 395, 396, 3, 81, 40, 0, 396, 397, 3,
		99, 49, 0, 397, 102, 1, 0, 0, 0, 398, 399, 3, 97, 48, 0, 399, 400, 3, 81,
		40, 0, 400, 401, 3, 95, 47, 0, 401, 104, 1, 0, 0, 0, 402, 403, 3, 97, 48,
		0, 403, 106, 1, 0, 0, 0, 404, 405, 3, 95, 47, 0, 405, 108, 1, 0, 0, 0,
		406, 410, 3, 27, 13, 0, 407, 410, 3, 25, 12, 0, 408, 410, 7, 15, 0, 0,
		409, 406, 1, 0, 0, 0, 409, 407, 1, 0, 0, 0, 409, 408, 1, 0, 0, 0, 410,
		411, 1, 0, 0, 0, 411, 409, 1, 0, 0, 0, 411, 412, 1, 0, 0, 0, 412, 110,
		1, 0, 0, 0, 36, 0, 134, 139, 144, 150, 166, 172, 176, 180, 201, 203, 214,
		216, 227, 239, 253, 255, 265, 267, 270, 277, 285, 294, 301, 303, 305, 314,
		316, 326, 335, 337, 366, 375, 383, 409, 411, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// TomlLexerInit initializes any static state used to implement TomlLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewTomlLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func TomlLexerInit() {
	staticData := &tomllexerLexerStaticData
	staticData.once.Do(tomllexerLexerInit)
}

// NewTomlLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewTomlLexer(input antlr.CharStream) *TomlLexer {
	TomlLexerInit()
	l := new(TomlLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &tomllexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "Toml.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// TomlLexer tokens.
const (
	TomlLexerT__0              = 1
	TomlLexerT__1              = 2
	TomlLexerT__2              = 3
	TomlLexerT__3              = 4
	TomlLexerT__4              = 5
	TomlLexerT__5              = 6
	TomlLexerT__6              = 7
	TomlLexerT__7              = 8
	TomlLexerT__8              = 9
	TomlLexerWS                = 10
	TomlLexerNL                = 11
	TomlLexerCOMMENT           = 12
	TomlLexerBOOLEAN           = 13
	TomlLexerBASIC_STRING      = 14
	TomlLexerML_BASIC_STRING   = 15
	TomlLexerLITERAL_STRING    = 16
	TomlLexerML_LITERAL_STRING = 17
	TomlLexerFLOAT             = 18
	TomlLexerINF               = 19
	TomlLexerNAN               = 20
	TomlLexerDEC_INT           = 21
	TomlLexerHEX_INT           = 22
	TomlLexerOCT_INT           = 23
	TomlLexerBIN_INT           = 24
	TomlLexerOFFSET_DATE_TIME  = 25
	TomlLexerLOCAL_DATE_TIME   = 26
	TomlLexerLOCAL_DATE        = 27
	TomlLexerLOCAL_TIME        = 28
	TomlLexerUNQUOTED_KEY      = 29
)
