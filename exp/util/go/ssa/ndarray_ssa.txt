# Name: github.com/wrmsr/bane/pkg/util/ndarray.init
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Synthetic: package initializer
func init():
0:                                                                entry P:0 S:2
	t0 = *init$guard                                                   bool
	if t0 goto 2 else 1
1:                                                           init.start P:1 S:1
	*init$guard = true:bool
	t1 = sync.init()                                                     ()
	t2 = github.com/wrmsr/bane/pkg/util/def.init()                       ()
	t3 = github.com/wrmsr/bane/pkg/util/types.init()                     ()
	t4 = fmt.init()                                                      ()
	t5 = strconv.init()                                                  ()
	t6 = strings.init()                                                  ()
	t7 = github.com/wrmsr/bane/pkg/util/check.init()                     ()
	t8 = reflect.init()                                                  ()
	t9 = io.init()                                                       ()
	t10 = new [3]any (varargs)                                      *[3]any
	t11 = &t10[0:int]                                                  *any
	t12 = make any <- func(ds Dims, o Dims) ((Dims).CheckEqualLen$thunk) any
	*t11 = t12
	t13 = &t10[1:int]                                                  *any
	t14 = make any <- func(ds Dims) int ((Dims).Len$thunk)              any
	*t13 = t14
	t15 = &t10[2:int]                                                  *any
	t16 = make any <- func(ds Dims, i int) int64 ((Dims).Get$thunk)     any
	*t15 = t16
	t17 = slice t10[:]                                                []any
	t18 = github.com/wrmsr/bane/pkg/util/def.Inline(t17...)             any
	t19 = new [2]any (varargs)                                      *[2]any
	t20 = &t19[0:int]                                                  *any
	t21 = make any <- func(st Strides, idxs Dims) int64 ((Strides).Offset$thunk) any
	*t20 = t21
	t22 = &t19[1:int]                                                  *any
	t23 = make any <- func(st Strides, idxs Dims) int64 ((Strides)._offset$thunk) any
	*t22 = t23
	t24 = slice t19[:]                                                []any
	t25 = github.com/wrmsr/bane/pkg/util/def.Inline(t24...)             any
	t26 = new [1]any (varargs)                                      *[1]any
	t27 = &t26[0:int]                                                  *any
	t28 = make any <- func(v View, idxs Dims) int64 ((View).Index$thunk) any
	*t27 = t28
	t29 = slice t26[:]                                                []any
	t30 = github.com/wrmsr/bane/pkg/util/def.Inline(t29...)             any
	t31 = new [1]any (varargs)                                      *[1]any
	t32 = &t31[0:int]                                                  *any
	t33 = make any <- func(v View) int64 (foo)                          any
	*t32 = t33
	t34 = slice t31[:]                                                []any
	t35 = github.com/wrmsr/bane/pkg/util/def.WithInline(t34...)         any
	jump 2
2:                                                            init.done P:2 S:0
	return

# Name: github.com/wrmsr/bane/pkg/util/ndarray._def_init$1
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/def_gen.go:12:20
# Parent: _def_init
func _def_init$1():
0:                                                                entry P:0 S:0
	t0 = github.com/wrmsr/bane/pkg/util/def.X_getPackageSpec() *github.com/wrmsr/bane/pkg/util/def.PackageSpec
	return

# Name: github.com/wrmsr/bane/pkg/util/ndarray._def_init
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/def_gen.go:11:6
func _def_init():
0:                                                                entry P:0 S:0
	t0 = (*sync.Once).Do(_def_init_once, _def_init$1)                    ()
	return

# Name: github.com/wrmsr/bane/pkg/util/ndarray._def_inl_foo
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/def_gen.go:18:6
# Locals:
#   0:	t0 View
#   1:	t1 View
#   2:	t3 Dims
#   3:	t9 Strides
#   4:	t12 Dims
#   5:	t18 Strides
#   6:	t20 Dims
func _def_inl_foo(v View) int64:
0:                                                                entry P:0 S:1
	t0 = local View (v)                                               *View
	*t0 = v
	t1 = local View (__def_inl_1)                                     *View
	t2 = *t0                                                           View
	*t1 = t2
	t3 = local Dims (__def_inl_2)                                     *Dims
	t4 = new [2]int64 (varargs)                                   *[2]int64
	t5 = &t4[0:int]                                                  *int64
	*t5 = 2:int64
	t6 = &t4[1:int]                                                  *int64
	*t6 = 2:int64
	t7 = slice t4[:]                                                []int64
	t8 = DimsOf(t7...)                                                 Dims
	*t3 = t8
	t9 = local Strides (__def_inl_4)                               *Strides
	t10 = &t1.st [#1]                                              *Strides
	t11 = *t10                                                      Strides
	*t9 = t11
	t12 = local Dims (__def_inl_5)                                    *Dims
	t13 = *t3                                                          Dims
	*t12 = t13
	t14 = *t9                                                       Strides
	t15 = t14.Dims [#0]                                                Dims
	t16 = *t12                                                         Dims
	t17 = (Dims).CheckEqualLen(t15, t16)                                 ()
	t18 = local Strides (__def_inl_7)                              *Strides
	t19 = *t9                                                       Strides
	*t18 = t19
	t20 = local Dims (__def_inl_8)                                    *Dims
	t21 = *t12                                                         Dims
	*t20 = t21
	t22 = *t18                                                      Strides
	t23 = t22.Dims [#0]                                                Dims
	t24 = (Dims).Len(t23)                                               int
	jump 3
1:                                                             for.body P:1 S:1
	t25 = &t20._a [#0]                                            *[6]int64
	t26 = &t25[t36]                                                  *int64
	t27 = *t26                                                        int64
	t28 = &t18.Dims [#0]                                              *Dims
	t29 = &t28._a [#0]                                            *[6]int64
	t30 = &t29[t36]                                                  *int64
	t31 = *t30                                                        int64
	t32 = t27 * t31                                                   int64
	t33 = t35 + t32                                                   int64
	t34 = t36 + 1:int                                                   int
	jump 3
2:                                                             for.done P:1 S:1
	jump 6
3:                                                             for.loop P:2 S:2
	t35 = phi [0: 0:int64, 1: t33] #o                                 int64
	t36 = phi [0: 0:int, 1: t34] #i                                     int
	t37 = t36 < 6:int                                                  bool
	if t37 goto 1 else 2
4:                                                             for.body P:1 S:1
	t38 = &t20._s [#1]                                             *[]int64
	t39 = *t38                                                      []int64
	t40 = &t39[t54]                                                  *int64
	t41 = *t40                                                        int64
	t42 = &t18.Dims [#0]                                              *Dims
	t43 = &t42._s [#1]                                             *[]int64
	t44 = *t43                                                      []int64
	t45 = &t44[t54]                                                  *int64
	t46 = *t45                                                        int64
	t47 = t41 * t46                                                   int64
	t48 = t53 + t47                                                   int64
	t49 = t54 + 1:int                                                   int
	jump 6
5:                                                             for.done P:1 S:0
	t50 = &t1.o [#2]                                                 *int64
	t51 = *t50                                                        int64
	t52 = t53 + t51                                                   int64
	return t52
6:                                                             for.loop P:2 S:2
	t53 = phi [2: t35, 4: t48] #o                                     int64
	t54 = phi [2: 0:int, 4: t49] #i                                     int
	t55 = t24 - 6:int                                                   int
	t56 = t54 < t55                                                    bool
	if t56 goto 4 else 5

# Name: github.com/wrmsr/bane/pkg/util/ndarray.AsDim
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dim.go:9:6
# Locals:
#   0:	t5 github.com/wrmsr/bane/pkg/util/types.Optional[int64]
func AsDim(o any) (github.com/wrmsr/bane/pkg/util/types.Optional[int64], bool):
0:                                                                entry P:0 S:2
	t0 = o == nil:any                                                  bool
	if t0 goto 1 else 2
1:                                                              if.then P:1 S:0
	t1 = github.com/wrmsr/bane/pkg/util/types.None[int64]() github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t1, true:bool
2:                                                              if.done P:1 S:2
	t2 = typeassert,ok o.(github.com/wrmsr/bane/pkg/util/types.Optional[int64]) (value github.com/wrmsr/bane/pkg/util/types.Optional[int64], ok bool)
	t3 = extract t2 #0 github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	t4 = extract t2 #1                                                 bool
	if t4 goto 3 else 4
3:                                                      typeswitch.body P:1 S:0
	t5 = local github.com/wrmsr/bane/pkg/util/types.Optional[int64] (o) *github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	*t5 = t3
	t6 = *t5           github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t6, true:bool
4:                                                      typeswitch.next P:1 S:2
	t7 = typeassert,ok o.(int)                         (value int, ok bool)
	t8 = extract t7 #0                                                  int
	t9 = extract t7 #1                                                 bool
	if t9 goto 5 else 6
5:                                                      typeswitch.body P:1 S:0
	t10 = convert int64 <- int (t8)                                   int64
	t11 = github.com/wrmsr/bane/pkg/util/types.Just[int64](t10) github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t11, true:bool
6:                                                      typeswitch.next P:1 S:2
	t12 = typeassert,ok o.(int8)                      (value int8, ok bool)
	t13 = extract t12 #0                                               int8
	t14 = extract t12 #1                                               bool
	if t14 goto 7 else 8
7:                                                      typeswitch.body P:1 S:0
	t15 = convert int64 <- int8 (t13)                                 int64
	t16 = github.com/wrmsr/bane/pkg/util/types.Just[int64](t15) github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t16, true:bool
8:                                                      typeswitch.next P:1 S:2
	t17 = typeassert,ok o.(int16)                    (value int16, ok bool)
	t18 = extract t17 #0                                              int16
	t19 = extract t17 #1                                               bool
	if t19 goto 9 else 10
9:                                                      typeswitch.body P:1 S:0
	t20 = convert int64 <- int16 (t18)                                int64
	t21 = github.com/wrmsr/bane/pkg/util/types.Just[int64](t20) github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t21, true:bool
10:                                                     typeswitch.next P:1 S:2
	t22 = typeassert,ok o.(int32)                    (value int32, ok bool)
	t23 = extract t22 #0                                              int32
	t24 = extract t22 #1                                               bool
	if t24 goto 11 else 12
11:                                                     typeswitch.body P:1 S:0
	t25 = convert int64 <- int32 (t23)                                int64
	t26 = github.com/wrmsr/bane/pkg/util/types.Just[int64](t25) github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t26, true:bool
12:                                                     typeswitch.next P:1 S:2
	t27 = typeassert,ok o.(int64)                    (value int64, ok bool)
	t28 = extract t27 #0                                              int64
	t29 = extract t27 #1                                               bool
	if t29 goto 13 else 14
13:                                                     typeswitch.body P:1 S:0
	t30 = github.com/wrmsr/bane/pkg/util/types.Just[int64](t28) github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t30, true:bool
14:                                                     typeswitch.next P:1 S:2
	t31 = typeassert,ok o.(uint)                      (value uint, ok bool)
	t32 = extract t31 #0                                               uint
	t33 = extract t31 #1                                               bool
	if t33 goto 15 else 16
15:                                                     typeswitch.body P:1 S:0
	t34 = convert int64 <- uint (t32)                                 int64
	t35 = github.com/wrmsr/bane/pkg/util/types.Just[int64](t34) github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t35, true:bool
16:                                                     typeswitch.next P:1 S:2
	t36 = typeassert,ok o.(uint8)                    (value uint8, ok bool)
	t37 = extract t36 #0                                              uint8
	t38 = extract t36 #1                                               bool
	if t38 goto 17 else 18
17:                                                     typeswitch.body P:1 S:0
	t39 = convert int64 <- uint8 (t37)                                int64
	t40 = github.com/wrmsr/bane/pkg/util/types.Just[int64](t39) github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t40, true:bool
18:                                                     typeswitch.next P:1 S:2
	t41 = typeassert,ok o.(uint16)                  (value uint16, ok bool)
	t42 = extract t41 #0                                             uint16
	t43 = extract t41 #1                                               bool
	if t43 goto 19 else 20
19:                                                     typeswitch.body P:1 S:0
	t44 = convert int64 <- uint16 (t42)                               int64
	t45 = github.com/wrmsr/bane/pkg/util/types.Just[int64](t44) github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t45, true:bool
20:                                                     typeswitch.next P:1 S:2
	t46 = typeassert,ok o.(uint32)                  (value uint32, ok bool)
	t47 = extract t46 #0                                             uint32
	t48 = extract t46 #1                                               bool
	if t48 goto 21 else 22
21:                                                     typeswitch.body P:1 S:0
	t49 = convert int64 <- uint32 (t47)                               int64
	t50 = github.com/wrmsr/bane/pkg/util/types.Just[int64](t49) github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t50, true:bool
22:                                                     typeswitch.next P:1 S:0
	t51 = github.com/wrmsr/bane/pkg/util/types.None[int64]() github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	return t51, false:bool

# Name: github.com/wrmsr/bane/pkg/util/ndarray.DimsOf
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:22:6
func DimsOf(s ...int64) Dims:
0:                                                                entry P:0 S:2
	t0 = new Dims (ds)                                                *Dims
	t1 = &t0._l [#2]                                                   *int
	t2 = len(s)                                                         int
	*t1 = t2
	t3 = len(s)                                                         int
	t4 = 6:int > t3                                                    bool
	if t4 goto 1 else 2
1:                                                              if.then P:1 S:1
	t5 = len(s)                                                         int
	jump 2
2:                                                              if.done P:2 S:2
	t6 = phi [0: 6:int, 1: t5] #n                                       int
	t7 = &t0._a [#0]                                              *[6]int64
	t8 = slice t7[:]                                                []int64
	t9 = slice s[:t6]                                               []int64
	t10 = copy(t8, t9)                                                  int
	t11 = len(s)                                                        int
	t12 = t11 - 6:int                                                   int
	t13 = t12 > 0:int                                                  bool
	if t13 goto 3 else 4
3:                                                              if.then P:1 S:1
	t14 = &t0._s [#1]                                              *[]int64
	t15 = make []int64 t12 t12                                      []int64
	*t14 = t15
	t16 = &t0._s [#1]                                              *[]int64
	t17 = *t16                                                      []int64
	t18 = slice s[6:int:]                                           []int64
	t19 = copy(t17, t18)                                                int
	jump 4
4:                                                              if.done P:2 S:0
	t20 = *t0                                                          Dims
	return t20

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).Equals
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:49:16
# Locals:
#   0:	t0 Dims
#   1:	t1 Dims
func (ds Dims) Equals(o Dims) bool:
0:                                                                entry P:0 S:2
	t0 = local Dims (ds)                                              *Dims
	*t0 = ds
	t1 = local Dims (o)                                               *Dims
	*t1 = o
	t2 = &t0._l [#2]                                                   *int
	t3 = *t2                                                            int
	t4 = &t1._l [#2]                                                   *int
	t5 = *t4                                                            int
	t6 = t3 != t5                                                      bool
	if t6 goto 1 else 2
1:                                                              if.then P:1 S:0
	return false:bool
2:                                                              if.done P:1 S:2
	t7 = &t0._l [#2]                                                   *int
	t8 = *t7                                                            int
	t9 = 6:int > t8                                                    bool
	if t9 goto 3 else 4
3:                                                              if.then P:1 S:1
	t10 = &t0._l [#2]                                                  *int
	t11 = *t10                                                          int
	jump 4
4:                                                              if.done P:2 S:1
	t12 = phi [2: 6:int, 3: t11] #n                                     int
	jump 7
5:                                                             for.body P:1 S:2
	t13 = &t0._a [#0]                                             *[6]int64
	t14 = &t13[t23]                                                  *int64
	t15 = *t14                                                        int64
	t16 = &t1._a [#0]                                             *[6]int64
	t17 = &t16[t23]                                                  *int64
	t18 = *t17                                                        int64
	t19 = t15 != t18                                                   bool
	if t19 goto 8 else 9
6:                                                             for.done P:1 S:2
	t20 = &t0._l [#2]                                                  *int
	t21 = *t20                                                          int
	t22 = t21 > 6:int                                                  bool
	if t22 goto 10 else 11
7:                                                             for.loop P:2 S:2
	t23 = phi [4: 0:int, 9: t25] #i                                     int
	t24 = t23 < t12                                                    bool
	if t24 goto 5 else 6
8:                                                              if.then P:1 S:0
	return false:bool
9:                                                              if.done P:1 S:1
	t25 = t23 + 1:int                                                   int
	jump 7
10:                                                             if.then P:1 S:1
	jump 13
11:                                                             if.done P:2 S:0
	return true:bool
12:                                                            for.body P:1 S:2
	t26 = &t0._s [#1]                                              *[]int64
	t27 = *t26                                                      []int64
	t28 = &t27[t35]                                                  *int64
	t29 = *t28                                                        int64
	t30 = &t1._s [#1]                                              *[]int64
	t31 = *t30                                                      []int64
	t32 = &t31[t35]                                                  *int64
	t33 = *t32                                                        int64
	t34 = t29 != t33                                                   bool
	if t34 goto 14 else 15
13:                                                            for.loop P:2 S:2
	t35 = phi [10: 0:int, 15: t40] #i                                   int
	t36 = &t0._s [#1]                                              *[]int64
	t37 = *t36                                                      []int64
	t38 = len(t37)                                                      int
	t39 = t35 < t38                                                    bool
	if t39 goto 12 else 11
14:                                                             if.then P:1 S:0
	return false:bool
15:                                                             if.done P:1 S:1
	t40 = t35 + 1:int                                                   int
	jump 13

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).String
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:77:16
# Locals:
#   0:	t0 Dims
func (ds Dims) String() string:
0:                                                                entry P:0 S:1
	t0 = local Dims (ds)                                              *Dims
	*t0 = ds
	t1 = new strings.Builder (sb)                          *strings.Builder
	t2 = (*strings.Builder).WriteRune(t1, 91:rune)             (int, error)
	jump 3
1:                                                             for.body P:1 S:2
	t3 = t6 > 0:int                                                    bool
	if t3 goto 4 else 5
2:                                                             for.done P:1 S:0
	t4 = (*strings.Builder).WriteRune(t1, 93:rune)             (int, error)
	t5 = (*strings.Builder).String(t1)                               string
	return t5
3:                                                             for.loop P:2 S:2
	t6 = phi [0: 0:int, 7: t18] #i                                      int
	t7 = &t0._l [#2]                                                   *int
	t8 = *t7                                                            int
	t9 = t6 < t8                                                       bool
	if t9 goto 1 else 2
4:                                                              if.then P:1 S:1
	t10 = (*strings.Builder).WriteRune(t1, 32:rune)            (int, error)
	jump 5
5:                                                              if.done P:2 S:2
	t11 = t6 < 6:int                                                   bool
	if t11 goto 6 else 8
6:                                                              if.then P:1 S:1
	t12 = &t0._a [#0]                                             *[6]int64
	t13 = &t12[t6]                                                   *int64
	t14 = *t13                                                        int64
	jump 7
7:                                                              if.done P:2 S:1
	t15 = phi [6: t14, 8: t23] #d                                     int64
	t16 = strconv.FormatInt(t15, 10:int)                             string
	t17 = (*strings.Builder).WriteString(t1, t16)              (int, error)
	t18 = t6 + 1:int                                                    int
	jump 3
8:                                                              if.else P:1 S:1
	t19 = &t0._s [#1]                                              *[]int64
	t20 = *t19                                                      []int64
	t21 = t6 - 6:int                                                    int
	t22 = &t20[t21]                                                  *int64
	t23 = *t22                                                        int64
	jump 7

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).CheckEqualLen
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:100:16
# Locals:
#   0:	t0 Dims
#   1:	t1 Dims
func (ds Dims) CheckEqualLen(o Dims):
0:                                                                entry P:0 S:2
	t0 = local Dims (ds)                                              *Dims
	*t0 = ds
	t1 = local Dims (o)                                               *Dims
	*t1 = o
	t2 = &t0._l [#2]                                                   *int
	t3 = *t2                                                            int
	t4 = &t1._l [#2]                                                   *int
	t5 = *t4                                                            int
	t6 = t3 != t5                                                      bool
	if t6 goto 1 else 2
1:                                                              if.then P:1 S:0
	t7 = &t0._l [#2]                                                   *int
	t8 = *t7                                                            int
	t9 = &t1._l [#2]                                                   *int
	t10 = *t9                                                           int
	t11 = new [2]any (varargs)                                      *[2]any
	t12 = &t11[0:int]                                                  *any
	t13 = make any <- int (t8)                                          any
	*t12 = t13
	t14 = &t11[1:int]                                                  *any
	t15 = make any <- int (t10)                                         any
	*t14 = t15
	t16 = slice t11[:]                                                []any
	t17 = fmt.Errorf("dim mismatch: got...":string, t16...)           error
	t18 = change interface interface{} <- error (t17)           interface{}
	panic t18
2:                                                              if.done P:1 S:0
	return

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).Slice
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:106:16
func (ds Dims) Slice() []int64:
0:                                                                entry P:0 S:2
	t0 = new Dims (ds)                                                *Dims
	*t0 = ds
	t1 = &t0._l [#2]                                                   *int
	t2 = *t1                                                            int
	t3 = make []int64 t2 t2                                         []int64
	t4 = &t0._l [#2]                                                   *int
	t5 = *t4                                                            int
	t6 = slice t3[:t5]                                              []int64
	t7 = &t0._a [#0]                                              *[6]int64
	t8 = &t0._l [#2]                                                   *int
	t9 = *t8                                                            int
	t10 = slice t7[:t9]                                             []int64
	t11 = copy(t6, t10)                                                 int
	t12 = &t0._l [#2]                                                  *int
	t13 = *t12                                                          int
	t14 = t13 > 6:int                                                  bool
	if t14 goto 1 else 2
1:                                                              if.then P:1 S:1
	t15 = slice t3[6:int:]                                          []int64
	t16 = &t0._s [#1]                                              *[]int64
	t17 = *t16                                                      []int64
	t18 = copy(t15, t17)                                                int
	jump 2
2:                                                              if.done P:2 S:0
	return t3

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).Len
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:115:16
# Locals:
#   0:	t0 Dims
func (ds Dims) Len() int:
0:                                                                entry P:0 S:0
	t0 = local Dims (ds)                                              *Dims
	*t0 = ds
	t1 = &t0._l [#2]                                                   *int
	t2 = *t1                                                            int
	return t2

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).Get
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:119:16
# Locals:
#   0:	t0 Dims
func (ds Dims) Get(i int) int64:
0:                                                                entry P:0 S:2
	t0 = local Dims (ds)                                              *Dims
	*t0 = ds
	t1 = i < 0:int                                                     bool
	if t1 goto 1 else 3
1:                                                              if.then P:2 S:0
	t2 = new [1]any (varargs)                                       *[1]any
	t3 = &t2[0:int]                                                    *any
	t4 = make any <- int (i)                                            any
	*t3 = t4
	t5 = slice t2[:]                                                  []any
	t6 = fmt.Errorf("index out of boun...":string, t5...)             error
	t7 = change interface interface{} <- error (t6)             interface{}
	panic t7
2:                                                              if.done P:1 S:2
	t8 = i < 6:int                                                     bool
	if t8 goto 4 else 5
3:                                                           cond.false P:1 S:2
	t9 = &t0._l [#2]                                                   *int
	t10 = *t9                                                           int
	t11 = i >= t10                                                     bool
	if t11 goto 1 else 2
4:                                                              if.then P:1 S:0
	t12 = &t0._a [#0]                                             *[6]int64
	t13 = &t12[i]                                                    *int64
	t14 = *t13                                                        int64
	return t14
5:                                                              if.else P:1 S:0
	t15 = &t0._s [#1]                                              *[]int64
	t16 = *t15                                                      []int64
	t17 = i - 6:int                                                     int
	t18 = &t16[t17]                                                  *int64
	t19 = *t18                                                        int64
	return t19

# Name: (*github.com/wrmsr/bane/pkg/util/ndarray.Dims)._set
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:131:17
func (ds *Dims) _set(i int, d int64):
0:                                                                entry P:0 S:2
	t0 = i < 6:int                                                     bool
	if t0 goto 1 else 3
1:                                                              if.then P:1 S:1
	t1 = &ds._a [#0]                                              *[6]int64
	t2 = &t1[i]                                                      *int64
	*t2 = d
	jump 2
2:                                                              if.done P:2 S:0
	return
3:                                                              if.else P:1 S:1
	t3 = &ds._s [#1]                                               *[]int64
	t4 = *t3                                                        []int64
	t5 = i - 6:int                                                      int
	t6 = &t4[t5]                                                     *int64
	*t6 = d
	jump 2

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).Find
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:139:16
# Locals:
#   0:	t0 Dims
func (ds Dims) Find(d int64) (int, bool):
0:                                                                entry P:0 S:1
	t0 = local Dims (ds)                                              *Dims
	*t0 = ds
	jump 3
1:                                                             for.body P:1 S:2
	t1 = *t0                                                           Dims
	t2 = (Dims).Get(t1, t4)                                           int64
	t3 = t2 == d                                                       bool
	if t3 goto 4 else 5
2:                                                             for.done P:1 S:0
	return -1:int, false:bool
3:                                                             for.loop P:2 S:2
	t4 = phi [0: 0:int, 5: t8] #i                                       int
	t5 = &t0._l [#2]                                                   *int
	t6 = *t5                                                            int
	t7 = t4 < t6                                                       bool
	if t7 goto 1 else 2
4:                                                              if.then P:1 S:0
	return t4, true:bool
5:                                                              if.done P:1 S:1
	t8 = t4 + 1:int                                                     int
	jump 3

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).Contains
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:148:16
# Locals:
#   0:	t0 Dims
func (ds Dims) Contains(d int64) bool:
0:                                                                entry P:0 S:0
	t0 = local Dims (ds)                                              *Dims
	*t0 = ds
	t1 = *t0                                                           Dims
	t2 = (Dims).Find(t1, d)                                     (int, bool)
	t3 = extract t2 #0                                                  int
	t4 = extract t2 #1                                                 bool
	return t4

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).Sum
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:153:16
# Locals:
#   0:	t0 Dims
func (ds Dims) Sum() int64:
0:                                                                entry P:0 S:1
	t0 = local Dims (ds)                                              *Dims
	*t0 = ds
	jump 3
1:                                                             for.body P:1 S:1
	t1 = *t0                                                           Dims
	t2 = (Dims).Get(t1, t6)                                           int64
	t3 = t5 + t2                                                      int64
	t4 = t6 + 1:int                                                     int
	jump 3
2:                                                             for.done P:1 S:0
	return t5
3:                                                             for.loop P:2 S:2
	t5 = phi [0: 0:int64, 1: t3] #r                                   int64
	t6 = phi [0: 0:int, 1: t4] #i                                       int
	t7 = &t0._l [#2]                                                   *int
	t8 = *t7                                                            int
	t9 = t6 < t8                                                       bool
	if t9 goto 1 else 2

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).Prod
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:161:16
# Locals:
#   0:	t0 Dims
func (ds Dims) Prod() int64:
0:                                                                entry P:0 S:1
	t0 = local Dims (ds)                                              *Dims
	*t0 = ds
	jump 3
1:                                                             for.body P:1 S:1
	t1 = *t0                                                           Dims
	t2 = (Dims).Get(t1, t6)                                           int64
	t3 = t5 * t2                                                      int64
	t4 = t6 + 1:int                                                     int
	jump 3
2:                                                             for.done P:1 S:0
	return t5
3:                                                             for.loop P:2 S:2
	t5 = phi [0: 1:int64, 1: t3] #r                                   int64
	t6 = phi [0: 0:int, 1: t4] #i                                       int
	t7 = &t0._l [#2]                                                   *int
	t8 = *t7                                                            int
	t9 = t6 < t8                                                       bool
	if t9 goto 1 else 2

# Name: github.com/wrmsr/bane/pkg/util/ndarray.NewMutDims
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:175:6
# Locals:
#   0:	t0 Dims
#   1:	t6 MutDims
func NewMutDims(l int) MutDims:
0:                                                                entry P:0 S:2
	t0 = local Dims (ds)                                              *Dims
	t1 = &t0._l [#2]                                                   *int
	*t1 = l
	t2 = l > 6:int                                                     bool
	if t2 goto 1 else 2
1:                                                              if.then P:1 S:1
	t3 = &t0._s [#1]                                               *[]int64
	t4 = l - 6:int                                                      int
	t5 = make []int64 t4 t4                                         []int64
	*t3 = t5
	jump 2
2:                                                              if.done P:2 S:0
	t6 = local MutDims (complit)                                   *MutDims
	t7 = &t6._ds [#0]                                                 *Dims
	t8 = *t0                                                           Dims
	*t7 = t8
	t9 = *t6                                                        MutDims
	return t9

# Name: github.com/wrmsr/bane/pkg/util/ndarray.MutDimsTo
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:187:6
func MutDimsTo(l int) MutDims:
0:                                                                entry P:0 S:1
	t0 = new MutDims (m)                                           *MutDims
	t1 = NewMutDims(l)                                              MutDims
	*t0 = t1
	jump 3
1:                                                             for.body P:1 S:1
	t2 = convert int64 <- int (t6)                                    int64
	t3 = (*MutDims).Set(t0, t6, t2)                                      ()
	t4 = t6 + 1:int                                                     int
	jump 3
2:                                                             for.done P:1 S:0
	t5 = *t0                                                        MutDims
	return t5
3:                                                             for.loop P:2 S:2
	t6 = phi [0: 0:int, 1: t4] #i                                       int
	t7 = t6 < l                                                        bool
	if t7 goto 1 else 2

# Name: github.com/wrmsr/bane/pkg/util/ndarray.DimsTo
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:195:6
func DimsTo(l int) Dims:
0:                                                                entry P:0 S:0
	t0 = new MutDims (md)                                          *MutDims
	t1 = MutDimsTo(l)                                               MutDims
	*t0 = t1
	t2 = (*MutDims).Decay(t0)                                          Dims
	return t2

# Name: (github.com/wrmsr/bane/pkg/util/ndarray.Dims).Mutate
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:200:16
# Locals:
#   0:	t0 Dims
#   1:	t12 MutDims
func (ds Dims) Mutate() MutDims:
0:                                                                entry P:0 S:2
	t0 = local Dims (ds)                                              *Dims
	*t0 = ds
	t1 = &t0._s [#1]                                               *[]int64
	t2 = *t1                                                        []int64
	t3 = t2 != nil:[]int64                                             bool
	if t3 goto 1 else 2
1:                                                              if.then P:1 S:1
	t4 = &t0._s [#1]                                               *[]int64
	t5 = *t4                                                        []int64
	t6 = len(t5)                                                        int
	t7 = make []int64 t6 t6                                         []int64
	t8 = &t0._s [#1]                                               *[]int64
	t9 = *t8                                                        []int64
	t10 = copy(t7, t9)                                                  int
	jump 2
2:                                                              if.done P:2 S:0
	t11 = phi [0: nil:[]int64, 1: t7] #s                            []int64
	t12 = local MutDims (complit)                                  *MutDims
	t13 = &t12._ds [#0]                                               *Dims
	t14 = &t13._a [#0]                                            *[6]int64
	t15 = &t0._a [#0]                                             *[6]int64
	t16 = *t15                                                     [6]int64
	t17 = &t13._s [#1]                                             *[]int64
	t18 = &t13._l [#2]                                                 *int
	t19 = &t0._l [#2]                                                  *int
	t20 = *t19                                                          int
	*t14 = t16
	*t17 = t11
	*t18 = t20
	t21 = *t12                                                      MutDims
	return t21

# Name: (*github.com/wrmsr/bane/pkg/util/ndarray.MutDims).Decay
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:216:20
func (ds *MutDims) Decay() Dims:
0:                                                                entry P:0 S:0
	t0 = &ds._ds [#0]                                                 *Dims
	t1 = *t0                                                           Dims
	return t1

# Name: (*github.com/wrmsr/bane/pkg/util/ndarray.MutDims).Len
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:218:20
func (ds *MutDims) Len() int:
0:                                                                entry P:0 S:0
	t0 = &ds._ds [#0]                                                 *Dims
	t1 = *t0                                                           Dims
	t2 = (Dims).Len(t1)                                                 int
	return t2

# Name: (*github.com/wrmsr/bane/pkg/util/ndarray.MutDims).Get
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:219:20
func (ds *MutDims) Get(i int) int64:
0:                                                                entry P:0 S:0
	t0 = &ds._ds [#0]                                                 *Dims
	t1 = *t0                                                           Dims
	t2 = (Dims).Get(t1, i)                                            int64
	return t2

# Name: (*github.com/wrmsr/bane/pkg/util/ndarray.MutDims).Set
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:221:20
func (ds *MutDims) Set(i int, d int64):
0:                                                                entry P:0 S:2
	t0 = i < 0:int                                                     bool
	if t0 goto 1 else 3
1:                                                              if.then P:2 S:0
	t1 = new [1]any (varargs)                                       *[1]any
	t2 = &t1[0:int]                                                    *any
	t3 = make any <- int (i)                                            any
	*t2 = t3
	t4 = slice t1[:]                                                  []any
	t5 = fmt.Errorf("index out of boun...":string, t4...)             error
	t6 = change interface interface{} <- error (t5)             interface{}
	panic t6
2:                                                              if.done P:1 S:0
	t7 = &ds._ds [#0]                                                 *Dims
	t8 = (*Dims)._set(t7, i, d)                                          ()
	return
3:                                                           cond.false P:1 S:2
	t9 = &ds._ds [#0]                                                 *Dims
	t10 = *t9                                                          Dims
	t11 = (Dims).Len(t10)                                               int
	t12 = i >= t11                                                     bool
	if t12 goto 1 else 2

# Name: github.com/wrmsr/bane/pkg/util/ndarray.AsDims
# Package: github.com/wrmsr/bane/pkg/util/ndarray
# Location: /Users/spinlock/src/wrmsr/bane/pkg/util/ndarray/dims.go:231:6
func AsDims(s ...any) Dims:
0:                                                                entry P:0 S:1
	t0 = new MutDims (m)                                           *MutDims
	t1 = len(s)                                                         int
	t2 = NewMutDims(t1)                                             MutDims
	*t0 = t2
	t3 = len(s)                                                         int
	jump 1
1:                                                      rangeindex.loop P:2 S:2
	t4 = phi [0: -1:int, 2: t5]                                         int
	t5 = t4 + 1:int                                                     int
	t6 = t5 < t3                                                       bool
	if t6 goto 2 else 3
2:                                                      rangeindex.body P:1 S:1
	t7 = &s[t5]                                                        *any
	t8 = *t7                                                            any
	t9 = AsDim(t8) (github.com/wrmsr/bane/pkg/util/types.Optional[int64], bool)
	t10 = extract t9 #0 github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	t11 = extract t9 #1                                                bool
	t12 = github.com/wrmsr/bane/pkg/util/check.Ok1[github.com/wrmsr/bane/pkg/util/types.Optional[int64]](t10, t11) github.com/wrmsr/bane/pkg/util/types.Optional[int64]
	t13 = (github.com/wrmsr/bane/pkg/util/types.Optional[int64]).Value[int64](t12) int64
	t14 = (*MutDims).Set(t0, t5, t13)                                    ()
	jump 1
3:                                                      rangeindex.done P:1 S:0
	t15 = (*MutDims).Decay(t0)                                         Dims
	return t15
