package instrs

import wt "github.com/wrmsr/bane/exp/util/wasm/types"

//

type Instr int16

//

type Def struct {
	I Instr

	Class Class
	Name  string
	Op    Opcode

	T wt.Type
	A wt.Type
	B wt.Type
	C wt.Type

	Ma Access
	Mz int
}

//

const numPreallocated = 512

var defs = make([]Def, 0, numPreallocated)

var instrsByOpcode = make(map[Opcode]Instr, numPreallocated)

func _add(d Def) Instr {
	if _, ok := instrsByOpcode[d.Op]; ok {
		panic(d.Op)
	}
	i := Instr(len(defs) + 1)
	d.I = i
	defs = append(defs, d)
	instrsByOpcode[d.Op] = i
	return i
}

func All() []Def {
	return defs
}

//

var (
	// control

	Unreachable  = _add(Def{Class: Control, Name: "unreachable", Op: Op_Unreachable})
	Nop          = _add(Def{Class: Control, Name: "nop", Op: Op_Nop})
	Block        = _add(Def{Class: Control, Name: "block", Op: Op_Block})
	Loop         = _add(Def{Class: Control, Name: "loop", Op: Op_Loop})
	If           = _add(Def{Class: Control, Name: "if", Op: Op_If})
	Else         = _add(Def{Class: Control, Name: "else", Op: Op_Else})
	End          = _add(Def{Class: Control, Name: "end", Op: Op_End})
	Br           = _add(Def{Class: Control, Name: "br", Op: Op_Br})
	BrIf         = _add(Def{Class: Control, Name: "br_if", Op: Op_BrIf, A: wt.I32{}})
	BrTable      = _add(Def{Class: Control, Name: "br_table", Op: Op_BrTable, A: wt.I32{}})
	Return       = _add(Def{Class: Control, Name: "return", Op: Op_Return})
	Call         = _add(Def{Class: Control, Name: "call", Op: Op_Call})
	CallIndirect = _add(Def{Class: Control, Name: "call_indirect", Op: Op_CallIndirect})

	// reference

	// RefNull = _add(Instr{L: Reference, N: "ref_null", O: Op_RefNull})
	// RefIsNull = _add(Instr{L: Reference, N: "ref_is_null", O: Op_RefIsNull})
	// RefFunc = _add(Instr{L: Reference, N: "ref_func", O: Op_RefFunc})

	// parametric

	Drop       = _add(Def{Class: Parametric, Name: "drop", Op: Op_Drop})
	Select     = _add(Def{Class: Parametric, Name: "select", Op: Op_Select, C: wt.I32{}})
	SelectType = _add(Def{Class: Parametric, Name: "select_type", Op: Op_SelectType, C: wt.I32{}})

	// variable

	LocalGet  = _add(Def{Class: Variable, Name: "local_get", Op: Op_LocalGet})
	LocalSet  = _add(Def{Class: Variable, Name: "local_set", Op: Op_LocalSet})
	LocalTee  = _add(Def{Class: Variable, Name: "local_tee", Op: Op_LocalTee})
	GlobalGet = _add(Def{Class: Variable, Name: "global_get", Op: Op_GlobalGet})
	GlobalSet = _add(Def{Class: Variable, Name: "global_set", Op: Op_GlobalSet})

	// table

	TableGet  = _add(Def{Class: Table, Name: "table_get", Op: Op_TableGet, A: wt.I32{}})
	TableSet  = _add(Def{Class: Table, Name: "table_set", Op: Op_TableSet, A: wt.I32{}})
	TableInit = _add(Def{Class: Table, Name: "table_init", Op: Op_TableInit, A: wt.I32{}, B: wt.I32{}, C: wt.I32{}})
	ElemDrop  = _add(Def{Class: Table, Name: "elem_drop", Op: Op_ElemDrop})
	TableCopy = _add(Def{Class: Table, Name: "table_copy", Op: Op_TableCopy, A: wt.I32{}, B: wt.I32{}, C: wt.I32{}})
	TableGrow = _add(Def{Class: Table, Name: "table_grow", Op: Op_TableGrow, B: wt.I32{}})
	TableSize = _add(Def{Class: Table, Name: "table_size", Op: Op_TableSize})
	TableFill = _add(Def{Class: Table, Name: "table_fill", Op: Op_TableFill, A: wt.I32{}, C: wt.I32{}})

	// memory

	Load_I32    = _add(Def{Class: Memory, Name: "load.i32", Op: Op_Load_I32, T: wt.I32{}, A: wt.I32{}, Ma: Load, Mz: 4})
	Load_I64    = _add(Def{Class: Memory, Name: "load.i64", Op: Op_Load_I64, T: wt.I64{}, A: wt.I32{}, Ma: Load, Mz: 8})
	Load_F32    = _add(Def{Class: Memory, Name: "load.f32", Op: Op_Load_F32, T: wt.F32{}, A: wt.I32{}, Ma: Load, Mz: 4})
	Load_F64    = _add(Def{Class: Memory, Name: "load.f64", Op: Op_Load_F64, T: wt.F64{}, A: wt.I32{}, Ma: Load, Mz: 8})
	Load8S_I32  = _add(Def{Class: Memory, Name: "load8_s.i32", Op: Op_Load8S_I32, T: wt.I32{}, A: wt.I32{}, Ma: Load, Mz: 1})
	Load8U_I32  = _add(Def{Class: Memory, Name: "load8_u.i32", Op: Op_Load8U_I32, T: wt.I32{}, A: wt.I32{}, Ma: Load, Mz: 1})
	Load16S_I32 = _add(Def{Class: Memory, Name: "load16_s.i32", Op: Op_Load16S_I32, T: wt.I32{}, A: wt.I32{}, Ma: Load, Mz: 2})
	Load16U_I32 = _add(Def{Class: Memory, Name: "load16_u.i32", Op: Op_Load16U_I32, T: wt.I32{}, A: wt.I32{}, Ma: Load, Mz: 2})
	Load8S_I64  = _add(Def{Class: Memory, Name: "load8_s.i64", Op: Op_Load8S_I64, T: wt.I64{}, A: wt.I32{}, Ma: Load, Mz: 1})
	Load8U_I64  = _add(Def{Class: Memory, Name: "load8_u.i64", Op: Op_Load8U_I64, T: wt.I64{}, A: wt.I32{}, Ma: Load, Mz: 1})
	Load16S_I64 = _add(Def{Class: Memory, Name: "load16_s.i64", Op: Op_Load16S_I64, T: wt.I64{}, A: wt.I32{}, Ma: Load, Mz: 2})
	Load16U_I64 = _add(Def{Class: Memory, Name: "load16_u.i64", Op: Op_Load16U_I64, T: wt.I64{}, A: wt.I32{}, Ma: Load, Mz: 2})
	Load32S_I64 = _add(Def{Class: Memory, Name: "load32_s.i64", Op: Op_Load32S_I64, T: wt.I64{}, A: wt.I32{}, Ma: Load, Mz: 4})
	Load32U_I64 = _add(Def{Class: Memory, Name: "load32_u.i64", Op: Op_Load32U_I64, T: wt.I64{}, A: wt.I32{}, Ma: Load, Mz: 4})
	Store_I32   = _add(Def{Class: Memory, Name: "store.i32", Op: Op_Store_I32, A: wt.I32{}, B: wt.I32{}, Ma: Store, Mz: 4})
	Store_I64   = _add(Def{Class: Memory, Name: "store.i64", Op: Op_Store_I64, A: wt.I32{}, B: wt.I64{}, Ma: Store, Mz: 8})
	Store_F32   = _add(Def{Class: Memory, Name: "store.f32", Op: Op_Store_F32, A: wt.I32{}, B: wt.F32{}, Ma: Store, Mz: 4})
	Store_F64   = _add(Def{Class: Memory, Name: "store.f64", Op: Op_Store_F64, A: wt.I32{}, B: wt.F64{}, Ma: Store, Mz: 8})
	Store8_I32  = _add(Def{Class: Memory, Name: "store8.i32", Op: Op_Store8_I32, A: wt.I32{}, B: wt.I32{}, Ma: Store, Mz: 1})
	Store16_I32 = _add(Def{Class: Memory, Name: "store16.i32", Op: Op_Store16_I32, A: wt.I32{}, B: wt.I32{}, Ma: Store, Mz: 2})
	Store8_I64  = _add(Def{Class: Memory, Name: "store8.i64", Op: Op_Store8_I64, A: wt.I32{}, B: wt.I64{}, Ma: Store, Mz: 1})
	Store16_I64 = _add(Def{Class: Memory, Name: "store16.i64", Op: Op_Store16_I64, A: wt.I32{}, B: wt.I64{}, Ma: Store, Mz: 2})
	Store32_I64 = _add(Def{Class: Memory, Name: "store32.i64", Op: Op_Store32_I64, A: wt.I32{}, B: wt.I64{}, Ma: Store, Mz: 4})
	MemorySize  = _add(Def{Class: Memory, Name: "memory_size", Op: Op_MemorySize, T: wt.I32{}})
	MemoryGrow  = _add(Def{Class: Memory, Name: "memory_grow", Op: Op_MemoryGrow, T: wt.I32{}, A: wt.I32{}})
	MemoryInit  = _add(Def{Class: Memory, Name: "memory_init", Op: Op_MemoryInit, A: wt.I32{}, B: wt.I32{}, C: wt.I32{}})
	DataDrop    = _add(Def{Class: Memory, Name: "data_drop", Op: Op_DataDrop})
	MemoryCopy  = _add(Def{Class: Memory, Name: "memory_copy", Op: Op_MemoryCopy, A: wt.I32{}, B: wt.I32{}, C: wt.I32{}})
	MemoryFill  = _add(Def{Class: Memory, Name: "memory_fill", Op: Op_MemoryFill, A: wt.I32{}, B: wt.I32{}, C: wt.I32{}})

	// numeric

	Const_I32 = _add(Def{Class: Numeric, Name: "const.i32", Op: Op_Const_I32, T: wt.I32{}})
	Const_I64 = _add(Def{Class: Numeric, Name: "const.i64", Op: Op_Const_I64, T: wt.F32{}})
	Const_F32 = _add(Def{Class: Numeric, Name: "const.f32", Op: Op_Const_F32, T: wt.I64{}})
	Const_F64 = _add(Def{Class: Numeric, Name: "const.f64", Op: Op_Const_F64, T: wt.F64{}})

	Eqz_I32 = _add(Def{Class: Numeric, Name: "eqz.i32", Op: Op_Eqz_I32, T: wt.I32{}, A: wt.I32{}})
	Eq_I32  = _add(Def{Class: Numeric, Name: "eq.i32", Op: Op_Eq_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	Ne_I32  = _add(Def{Class: Numeric, Name: "ne.i32", Op: Op_Ne_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	LtS_I32 = _add(Def{Class: Numeric, Name: "lt_s.i32", Op: Op_LtS_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	LtU_I32 = _add(Def{Class: Numeric, Name: "lt_u.i32", Op: Op_LtU_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	GtS_I32 = _add(Def{Class: Numeric, Name: "gt_s.i32", Op: Op_GtS_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	GtU_I32 = _add(Def{Class: Numeric, Name: "gt_u.i32", Op: Op_GtU_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	LeS_I32 = _add(Def{Class: Numeric, Name: "le_s.i32", Op: Op_LeS_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	LeU_I32 = _add(Def{Class: Numeric, Name: "le_u.i32", Op: Op_LeU_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	GeS_I32 = _add(Def{Class: Numeric, Name: "ge_s.i32", Op: Op_GeS_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	GeU_I32 = _add(Def{Class: Numeric, Name: "ge_u.i32", Op: Op_GeU_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})

	Eqz_I64 = _add(Def{Class: Numeric, Name: "eqz.i64", Op: Op_Eqz_I64, T: wt.I32{}, A: wt.I64{}})
	Eq_I64  = _add(Def{Class: Numeric, Name: "eq.i64", Op: Op_Eq_I64, T: wt.I32{}, A: wt.I64{}, B: wt.I64{}})
	Ne_I64  = _add(Def{Class: Numeric, Name: "ne.i64", Op: Op_Ne_I64, T: wt.I32{}, A: wt.I64{}, B: wt.I64{}})
	LtS_I64 = _add(Def{Class: Numeric, Name: "lt_s.i64", Op: Op_LtS_I64, T: wt.I32{}, A: wt.I64{}, B: wt.I64{}})
	LtU_I64 = _add(Def{Class: Numeric, Name: "lt_u.i64", Op: Op_LtU_I64, T: wt.I32{}, A: wt.I64{}, B: wt.I64{}})
	GtS_I64 = _add(Def{Class: Numeric, Name: "gt_s.i64", Op: Op_GtS_I64, T: wt.I32{}, A: wt.I64{}, B: wt.I64{}})
	GtU_I64 = _add(Def{Class: Numeric, Name: "gt_u.i64", Op: Op_GtU_I64, T: wt.I32{}, A: wt.I64{}, B: wt.I64{}})
	LeS_I64 = _add(Def{Class: Numeric, Name: "le_s.i64", Op: Op_LeS_I64, T: wt.I32{}, A: wt.I64{}, B: wt.I64{}})
	LeU_I64 = _add(Def{Class: Numeric, Name: "le_u.i64", Op: Op_LeU_I64, T: wt.I32{}, A: wt.I64{}, B: wt.I64{}})
	GeS_I64 = _add(Def{Class: Numeric, Name: "ge_s.i64", Op: Op_GeS_I64, T: wt.I32{}, A: wt.I64{}, B: wt.I64{}})
	GeU_I64 = _add(Def{Class: Numeric, Name: "ge_u.i64", Op: Op_GeU_I64, T: wt.I32{}, A: wt.I64{}, B: wt.I64{}})

	Eq_F32 = _add(Def{Class: Numeric, Name: "eq.f32", Op: Op_Eq_F32, T: wt.I32{}, A: wt.F32{}})
	Ne_F32 = _add(Def{Class: Numeric, Name: "ne.f32", Op: Op_Ne_F32, T: wt.I32{}, A: wt.F32{}, B: wt.F32{}})
	Lt_F32 = _add(Def{Class: Numeric, Name: "lt.f32", Op: Op_Lt_F32, T: wt.I32{}, A: wt.F32{}, B: wt.F32{}})
	Gt_F32 = _add(Def{Class: Numeric, Name: "gt.f32", Op: Op_Gt_F32, T: wt.I32{}, A: wt.F32{}, B: wt.F32{}})
	Le_F32 = _add(Def{Class: Numeric, Name: "le.f32", Op: Op_Le_F32, T: wt.I32{}, A: wt.F32{}, B: wt.F32{}})
	Ge_F32 = _add(Def{Class: Numeric, Name: "ge.f32", Op: Op_Ge_F32, T: wt.I32{}, A: wt.F32{}, B: wt.F32{}})

	Eq_F64 = _add(Def{Class: Numeric, Name: "eq.f64", Op: Op_Eq_F64, T: wt.I64{}, A: wt.F64{}})
	Ne_F64 = _add(Def{Class: Numeric, Name: "ne.f64", Op: Op_Ne_F64, T: wt.I64{}, A: wt.F64{}, B: wt.F64{}})
	Lt_F64 = _add(Def{Class: Numeric, Name: "lt.f64", Op: Op_Lt_F64, T: wt.I64{}, A: wt.F64{}, B: wt.F64{}})
	Gt_F64 = _add(Def{Class: Numeric, Name: "gt.f64", Op: Op_Gt_F64, T: wt.I64{}, A: wt.F64{}, B: wt.F64{}})
	Le_F64 = _add(Def{Class: Numeric, Name: "le.f64", Op: Op_Le_F64, T: wt.I64{}, A: wt.F64{}, B: wt.F64{}})
	Ge_F64 = _add(Def{Class: Numeric, Name: "ge.f64", Op: Op_Ge_F64, T: wt.I64{}, A: wt.F64{}, B: wt.F64{}})

	Clz_I32    = _add(Def{Class: Numeric, Name: "clz.i32", Op: Op_Clz_I32, T: wt.I32{}, A: wt.I32{}})
	Ctz_I32    = _add(Def{Class: Numeric, Name: "ctz.i32", Op: Op_Ctz_I32, T: wt.I32{}, A: wt.I32{}})
	Popcnt_I32 = _add(Def{Class: Numeric, Name: "popcnt.i32", Op: Op_Popcnt_I32, T: wt.I32{}, A: wt.I32{}})
	Add_I32    = _add(Def{Class: Numeric, Name: "add.i32", Op: Op_Add_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	Sub_I32    = _add(Def{Class: Numeric, Name: "sub.i32", Op: Op_Sub_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	Mul_I32    = _add(Def{Class: Numeric, Name: "mul.i32", Op: Op_Mul_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	DivS_I32   = _add(Def{Class: Numeric, Name: "div_s.i32", Op: Op_DivS_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	DivU_I32   = _add(Def{Class: Numeric, Name: "div_u.i32", Op: Op_DivU_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	RemS_I32   = _add(Def{Class: Numeric, Name: "rem_s.i32", Op: Op_RemS_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	RemU_I32   = _add(Def{Class: Numeric, Name: "rem_u.i32", Op: Op_RemU_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	And_I32    = _add(Def{Class: Numeric, Name: "and.i32", Op: Op_And_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	Or_I32     = _add(Def{Class: Numeric, Name: "or.i32", Op: Op_Or_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	Xor_I32    = _add(Def{Class: Numeric, Name: "xor.i32", Op: Op_Xor_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	Shl_I32    = _add(Def{Class: Numeric, Name: "shl.i32", Op: Op_Shl_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	ShrS_I32   = _add(Def{Class: Numeric, Name: "shr_s.i32", Op: Op_ShrS_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	ShrU_I32   = _add(Def{Class: Numeric, Name: "shr_u.i32", Op: Op_ShrU_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	Rotl_I32   = _add(Def{Class: Numeric, Name: "rot_l.i32", Op: Op_Rotl_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	Rotr_I32   = _add(Def{Class: Numeric, Name: "rot_r.i32", Op: Op_Rotr_I32, T: wt.I32{}, A: wt.I32{}, B: wt.I32{}})
	Clz_I64    = _add(Def{Class: Numeric, Name: "clz.i64", Op: Op_Clz_I64, T: wt.I64{}, A: wt.I64{}})
	Ctz_I64    = _add(Def{Class: Numeric, Name: "ctz.i64", Op: Op_Ctz_I64, T: wt.I64{}, A: wt.I64{}})
	Popcnt_I64 = _add(Def{Class: Numeric, Name: "popcnt.i64", Op: Op_Popcnt_I64, T: wt.I64{}, A: wt.I64{}})
	Add_I64    = _add(Def{Class: Numeric, Name: "add.i64", Op: Op_Add_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	Sub_I64    = _add(Def{Class: Numeric, Name: "sub.i64", Op: Op_Sub_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	Mul_I64    = _add(Def{Class: Numeric, Name: "mul.i64", Op: Op_Mul_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	DivS_I64   = _add(Def{Class: Numeric, Name: "div_s.i64", Op: Op_DivS_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	DivU_I64   = _add(Def{Class: Numeric, Name: "div_u.i64", Op: Op_DivU_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	RemS_I64   = _add(Def{Class: Numeric, Name: "rem_s.i64", Op: Op_RemS_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	RemU_I64   = _add(Def{Class: Numeric, Name: "rem_u.i64", Op: Op_RemU_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	And_I64    = _add(Def{Class: Numeric, Name: "and.i64", Op: Op_And_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	Or_I64     = _add(Def{Class: Numeric, Name: "or.i64", Op: Op_Or_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	Xor_I64    = _add(Def{Class: Numeric, Name: "xor.i64", Op: Op_Xor_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	Shl_I64    = _add(Def{Class: Numeric, Name: "shl.i64", Op: Op_Shl_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	ShrS_I64   = _add(Def{Class: Numeric, Name: "shr_s.i64", Op: Op_ShrS_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	ShrU_I64   = _add(Def{Class: Numeric, Name: "shr_u.i64", Op: Op_ShrU_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	Rotl_I64   = _add(Def{Class: Numeric, Name: "rot_l.i64", Op: Op_Rotl_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})
	Rotr_I64   = _add(Def{Class: Numeric, Name: "rot_r.i64", Op: Op_Rotr_I64, T: wt.I64{}, A: wt.I64{}, B: wt.I64{}})

	Abs_F32      = _add(Def{Class: Numeric, Name: "abs.f32", Op: Op_Abs_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Neg_F32      = _add(Def{Class: Numeric, Name: "neg.f32", Op: Op_Neg_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Ceil_F32     = _add(Def{Class: Numeric, Name: "ceil.f32", Op: Op_Ceil_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Floor_F32    = _add(Def{Class: Numeric, Name: "floor.f32", Op: Op_Floor_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Trunc_F32    = _add(Def{Class: Numeric, Name: "trunc.f32", Op: Op_Trunc_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Nearest_F32  = _add(Def{Class: Numeric, Name: "nearest.f32", Op: Op_Nearest_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Sqrt_F32     = _add(Def{Class: Numeric, Name: "sqrt.f32", Op: Op_Sqrt_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Add_F32      = _add(Def{Class: Numeric, Name: "add.f32", Op: Op_Add_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Sub_F32      = _add(Def{Class: Numeric, Name: "sub.f32", Op: Op_Sub_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Mul_F32      = _add(Def{Class: Numeric, Name: "mul.f32", Op: Op_Mul_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Div_F32      = _add(Def{Class: Numeric, Name: "div.f32", Op: Op_Div_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Min_F32      = _add(Def{Class: Numeric, Name: "min.f32", Op: Op_Min_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Max_F32      = _add(Def{Class: Numeric, Name: "max.f32", Op: Op_Max_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})
	Copysign_F32 = _add(Def{Class: Numeric, Name: "copysign.f32", Op: Op_Copysign_F32, T: wt.F32{}, A: wt.F32{}, B: wt.F32{}})

	Abs_F64      = _add(Def{Class: Numeric, Name: "abs.f64", Op: Op_Abs_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Neg_F64      = _add(Def{Class: Numeric, Name: "neg.f64", Op: Op_Neg_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Ceil_F64     = _add(Def{Class: Numeric, Name: "ceil.f64", Op: Op_Ceil_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Floor_F64    = _add(Def{Class: Numeric, Name: "floor.f64", Op: Op_Floor_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Trunc_F64    = _add(Def{Class: Numeric, Name: "trunc.f64", Op: Op_Trunc_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Nearest_F64  = _add(Def{Class: Numeric, Name: "nearest.f64", Op: Op_Nearest_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Sqrt_F64     = _add(Def{Class: Numeric, Name: "sqrt.f64", Op: Op_Sqrt_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Add_F64      = _add(Def{Class: Numeric, Name: "add.f64", Op: Op_Add_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Sub_F64      = _add(Def{Class: Numeric, Name: "sub.f64", Op: Op_Sub_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Mul_F64      = _add(Def{Class: Numeric, Name: "mul.f64", Op: Op_Mul_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Div_F64      = _add(Def{Class: Numeric, Name: "div.f64", Op: Op_Div_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Min_F64      = _add(Def{Class: Numeric, Name: "min.f64", Op: Op_Min_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Max_F64      = _add(Def{Class: Numeric, Name: "max.f64", Op: Op_Max_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})
	Copysign_F64 = _add(Def{Class: Numeric, Name: "copysign.f64", Op: Op_Copysign_F64, T: wt.F64{}, A: wt.F64{}, B: wt.F64{}})

	WrapI64_I32        = _add(Def{Class: Numeric, Name: "wrap_i64.i32", Op: Op_WrapI64_I32, T: wt.I32{}, A: wt.I64{}})
	TruncF32S_I32      = _add(Def{Class: Numeric, Name: "trunc_f32_s.i32", Op: Op_TruncF32S_I32, T: wt.I32{}, A: wt.F32{}})
	TruncF32U_I32      = _add(Def{Class: Numeric, Name: "trunc_f32_u.i32", Op: Op_TruncF32U_I32, T: wt.I32{}, A: wt.F32{}})
	TruncF64S_I32      = _add(Def{Class: Numeric, Name: "trunc_f64_s.i32", Op: Op_TruncF64S_I32, T: wt.I32{}, A: wt.F64{}})
	TruncF64U_I32      = _add(Def{Class: Numeric, Name: "trunc_f64_u.i32", Op: Op_TruncF64U_I32, T: wt.I32{}, A: wt.F64{}})
	ExtendI32S_I64     = _add(Def{Class: Numeric, Name: "extend_i32_s.i64", Op: Op_ExtendI32S_I64, T: wt.I64{}, A: wt.I32{}})
	ExtendI32U_I64     = _add(Def{Class: Numeric, Name: "extend_i32_u.i64", Op: Op_ExtendI32U_I64, T: wt.I64{}, A: wt.I32{}})
	TruncF32S_I64      = _add(Def{Class: Numeric, Name: "trunc_f32_s.i64", Op: Op_TruncF32S_I64, T: wt.I64{}, A: wt.F32{}})
	TruncF32U_I64      = _add(Def{Class: Numeric, Name: "trunc_f32_u.i64", Op: Op_TruncF32U_I64, T: wt.I64{}, A: wt.F32{}})
	TruncF64S_I64      = _add(Def{Class: Numeric, Name: "trunc_f64_s.i64", Op: Op_TruncF64S_I64, T: wt.I64{}, A: wt.F64{}})
	TruncF64U_I64      = _add(Def{Class: Numeric, Name: "trunc_f64_u.i64", Op: Op_TruncF64U_I64, T: wt.I64{}, A: wt.F64{}})
	ConvertI32S_F32    = _add(Def{Class: Numeric, Name: "convert_i32_s.f32", Op: Op_ConvertI32S_F32, T: wt.F32{}, A: wt.I32{}})
	ConvertI32U_F32    = _add(Def{Class: Numeric, Name: "convert_i32_u.f32", Op: Op_ConvertI32U_F32, T: wt.F32{}, A: wt.I32{}})
	ConvertI64S_F32    = _add(Def{Class: Numeric, Name: "convert_i64_s.f32", Op: Op_ConvertI64S_F32, T: wt.F32{}, A: wt.I64{}})
	ConvertI64U_F32    = _add(Def{Class: Numeric, Name: "convert_i64_u.f32", Op: Op_ConvertI64U_F32, T: wt.F32{}, A: wt.I64{}})
	DemoteF64_F32      = _add(Def{Class: Numeric, Name: "demote_f64.f32", Op: Op_DemoteF64_F32, T: wt.F32{}, A: wt.F64{}})
	ConvertI32S_F64    = _add(Def{Class: Numeric, Name: "convert_i32_s.f64", Op: Op_ConvertI32S_F64, T: wt.F64{}, A: wt.I32{}})
	ConvertI32U_F64    = _add(Def{Class: Numeric, Name: "convert_i32_u.f64", Op: Op_ConvertI32U_F64, T: wt.F64{}, A: wt.I32{}})
	ConvertI64S_F64    = _add(Def{Class: Numeric, Name: "convert_i64_s.f64", Op: Op_ConvertI64S_F64, T: wt.F64{}, A: wt.I64{}})
	ConvertI64U_F64    = _add(Def{Class: Numeric, Name: "convert_i64_u.f64", Op: Op_ConvertI64U_F64, T: wt.F64{}, A: wt.I64{}})
	PromoteF32_F64     = _add(Def{Class: Numeric, Name: "promote_f32.f64", Op: Op_PromoteF32_F64, T: wt.F64{}, A: wt.F32{}})
	ReinterpretF32_I32 = _add(Def{Class: Numeric, Name: "reinterpret_f32.i32", Op: Op_ReinterpretF32_I32, T: wt.I32{}, A: wt.F32{}})
	ReinterpretF64_I64 = _add(Def{Class: Numeric, Name: "reinterpret_f64.i64", Op: Op_ReinterpretF64_I64, T: wt.I64{}, A: wt.F64{}})
	ReinterpretI32_F32 = _add(Def{Class: Numeric, Name: "reinterpret_i32.f32", Op: Op_ReinterpretI32_F32, T: wt.F32{}, A: wt.I32{}})
	ReinterpretI64_F64 = _add(Def{Class: Numeric, Name: "reinterpret_i64.f64", Op: Op_ReinterpretI64_F64, T: wt.F64{}, A: wt.I64{}})

	Extend8S_I32  = _add(Def{Class: Numeric, Name: "extend8_s.i32", Op: Op_Extend8S_I32, T: wt.I32{}, A: wt.I32{}})
	Extend16S_I32 = _add(Def{Class: Numeric, Name: "extend16_s.i32", Op: Op_Extend16S_I32, T: wt.I32{}, A: wt.I32{}})
	Extend8S_I64  = _add(Def{Class: Numeric, Name: "extend8_s.i64", Op: Op_Extend8S_I64, T: wt.I64{}, A: wt.I64{}})
	Extend16S_I64 = _add(Def{Class: Numeric, Name: "extend16_s.i64", Op: Op_Extend16S_I64, T: wt.I64{}, A: wt.I64{}})
	Extend32S_I64 = _add(Def{Class: Numeric, Name: "extend32_s.i64", Op: Op_Extend32S_I64, T: wt.I64{}, A: wt.I64{}})

	TruncSatF32S_I32 = _add(Def{Class: Numeric, Name: "trunc_sat_f32_s.i32", Op: Op_TruncSatF32S_I32, T: wt.I32{}, A: wt.F32{}})
	TruncSatF32U_I32 = _add(Def{Class: Numeric, Name: "trunc_sat_f32_u.i32", Op: Op_TruncSatF32U_I32, T: wt.I32{}, A: wt.F32{}})
	TruncSatF64S_I32 = _add(Def{Class: Numeric, Name: "trunc_sat_f64_s.i32", Op: Op_TruncSatF64S_I32, T: wt.I32{}, A: wt.F64{}})
	TruncSatF64U_I32 = _add(Def{Class: Numeric, Name: "trunc_sat_f64_u.i32", Op: Op_TruncSatF64U_I32, T: wt.I32{}, A: wt.F64{}})
	TruncSatF32S_I64 = _add(Def{Class: Numeric, Name: "trunc_sat_f32_s.i64", Op: Op_TruncSatF32S_I64, T: wt.I64{}, A: wt.F32{}})
	TruncSatF32U_I64 = _add(Def{Class: Numeric, Name: "trunc_sat_f32_u.i64", Op: Op_TruncSatF32U_I64, T: wt.I64{}, A: wt.F32{}})
	TruncSatF64S_I64 = _add(Def{Class: Numeric, Name: "trunc_sat_f64_s.i64", Op: Op_TruncSatF64S_I64, T: wt.I64{}, A: wt.F64{}})
	TruncSatF64U_I64 = _add(Def{Class: Numeric, Name: "trunc_sat_f64_u.i64", Op: Op_TruncSatF64U_I64, T: wt.I64{}, A: wt.F64{}})

	// vector

	Load_V128        = _add(Def{Class: Vector, Name: "load.v128", Op: Op_Load_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 16})
	Load8x8S_V128    = _add(Def{Class: Vector, Name: "load8x8_s.v128", Op: Op_Load8x8S_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 8})
	Load8x8U_V128    = _add(Def{Class: Vector, Name: "load8x8_u.v128", Op: Op_Load8x8U_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 8})
	Load16x4S_V128   = _add(Def{Class: Vector, Name: "load16x4_s.v128", Op: Op_Load16x4S_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 8})
	Load16x4U_V128   = _add(Def{Class: Vector, Name: "load16x4_u.v128", Op: Op_Load16x4U_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 8})
	Load32x2S_V128   = _add(Def{Class: Vector, Name: "load32x2_s.v128", Op: Op_Load32x2S_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 8})
	Load32x2U_V128   = _add(Def{Class: Vector, Name: "load32x2_u.v128", Op: Op_Load32x2U_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 8})
	Load8Splat_V128  = _add(Def{Class: Vector, Name: "load8_splat.v128", Op: Op_Load8Splat_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 1})
	Load16Splat_V128 = _add(Def{Class: Vector, Name: "load16_splat.v128", Op: Op_Load16Splat_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 2})
	Load32Splat_V128 = _add(Def{Class: Vector, Name: "load32_splat.v128", Op: Op_Load32Splat_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 4})
	Load64Splat_V128 = _add(Def{Class: Vector, Name: "load64_splat.v128", Op: Op_Load64Splat_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 8})
	Load32Zero_V128  = _add(Def{Class: Vector, Name: "load32_zero.v128", Op: Op_Load32Zero_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 4})
	Load64Zero_V128  = _add(Def{Class: Vector, Name: "load64_zero.v128", Op: Op_Load64Zero_V128, T: wt.V128{}, A: wt.I32{}, Ma: Load, Mz: 8})
	Store_V128       = _add(Def{Class: Vector, Name: "store.v128", Op: Op_Store_V128, A: wt.I32{}, B: wt.V128{}, Ma: Store, Mz: 16})
	Load8Lane_V128   = _add(Def{Class: Vector, Name: "load8_lane.v128", Op: Op_Load8Lane_V128, T: wt.V128{}, A: wt.I32{}, B: wt.V128{}, Ma: Load, Mz: 1})
	Load16Lane_V128  = _add(Def{Class: Vector, Name: "load16_lane.v128", Op: Op_Load16Lane_V128, T: wt.V128{}, A: wt.I32{}, B: wt.V128{}, Ma: Load, Mz: 2})
	Load32Lane_V128  = _add(Def{Class: Vector, Name: "load32_lane.v128", Op: Op_Load32Lane_V128, T: wt.V128{}, A: wt.I32{}, B: wt.V128{}, Ma: Load, Mz: 4})
	Load64Lane_V128  = _add(Def{Class: Vector, Name: "load64_lane.v128", Op: Op_Load64Lane_V128, T: wt.V128{}, A: wt.I32{}, B: wt.V128{}, Ma: Load, Mz: 8})
	Store8Lane_V128  = _add(Def{Class: Vector, Name: "store8_lane.v128", Op: Op_Store8Lane_V128, A: wt.I32{}, B: wt.V128{}, Ma: Store, Mz: 1})
	Store16Lane_V128 = _add(Def{Class: Vector, Name: "store16_lane.v128", Op: Op_Store16Lane_V128, A: wt.I32{}, B: wt.V128{}, Ma: Store, Mz: 2})
	Store32Lane_V128 = _add(Def{Class: Vector, Name: "store32_lane.v128", Op: Op_Store32Lane_V128, A: wt.I32{}, B: wt.V128{}, Ma: Store, Mz: 4})
	Store64Lane_V128 = _add(Def{Class: Vector, Name: "store64_lane.v128", Op: Op_Store64Lane_V128, A: wt.I32{}, B: wt.V128{}, Ma: Store, Mz: 8})

	Const_V128 = _add(Def{Class: Vector, Name: "const.v128", Op: Op_Const_V128, T: wt.V128{}})

	Shuffle_I8X16 = _add(Def{Class: Vector, Name: "shuffle.i8x16", Op: Op_Shuffle_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	ExtractLaneS_I8X16 = _add(Def{Class: Vector, Name: "extract_lane_s.i8x16", Op: Op_ExtractLaneS_I8X16, T: wt.I32{}, A: wt.V128{}})
	ExtractLaneU_I8X16 = _add(Def{Class: Vector, Name: "extract_lane_u.i8x16", Op: Op_ExtractLaneU_I8X16, T: wt.I32{}, A: wt.V128{}})
	ReplaceLane_I8X16  = _add(Def{Class: Vector, Name: "replace_lane.i8x16", Op: Op_ReplaceLane_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ExtractLaneS_I16X8 = _add(Def{Class: Vector, Name: "extract_lane_s.i16x8", Op: Op_ExtractLaneS_I16X8, T: wt.I32{}, A: wt.V128{}})
	ExtractLaneU_I16X8 = _add(Def{Class: Vector, Name: "extract_lane_u.i16x8", Op: Op_ExtractLaneU_I16X8, T: wt.I32{}, A: wt.V128{}})
	ReplaceLane_I16X8  = _add(Def{Class: Vector, Name: "replace_lane.i16x8", Op: Op_ReplaceLane_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ExtractLane_I32X4  = _add(Def{Class: Vector, Name: "extract_lane.i32x4", Op: Op_ExtractLane_I32X4, T: wt.I32{}, A: wt.V128{}})
	ReplaceLane_I32X4  = _add(Def{Class: Vector, Name: "replace_lane.i32x4", Op: Op_ReplaceLane_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ExtractLane_I64X2  = _add(Def{Class: Vector, Name: "extract_lane.i64x2", Op: Op_ExtractLane_I64X2, T: wt.I64{}, A: wt.V128{}})
	ReplaceLane_I64X2  = _add(Def{Class: Vector, Name: "replace_lane.i64x2", Op: Op_ReplaceLane_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.I64{}})
	ExtractLane_F32X4  = _add(Def{Class: Vector, Name: "extract_lane.f32x4", Op: Op_ExtractLane_F32X4, T: wt.F32{}, A: wt.V128{}})
	ReplaceLane_F32X4  = _add(Def{Class: Vector, Name: "replace_lane.f32x4", Op: Op_ReplaceLane_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.F32{}})
	ExtractLane_F64X2  = _add(Def{Class: Vector, Name: "extract_lane.f64x2", Op: Op_ExtractLane_F64X2, T: wt.F64{}, A: wt.V128{}})
	ReplaceLane_F64X2  = _add(Def{Class: Vector, Name: "replace_lane.f64x2", Op: Op_ReplaceLane_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.F64{}})

	Swizzle_I8X16 = _add(Def{Class: Vector, Name: "swizzle.i8x16", Op: Op_Swizzle_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Splat_I8X16   = _add(Def{Class: Vector, Name: "splat.i8x16", Op: Op_Splat_I8X16, T: wt.V128{}, A: wt.I32{}})
	Splat_I16X8   = _add(Def{Class: Vector, Name: "splat.i16x8", Op: Op_Splat_I16X8, T: wt.V128{}, A: wt.I32{}})
	Splat_I32X4   = _add(Def{Class: Vector, Name: "splat.i32x4", Op: Op_Splat_I32X4, T: wt.V128{}, A: wt.I32{}})
	Splat_I64X2   = _add(Def{Class: Vector, Name: "splat.i64x2", Op: Op_Splat_I64X2, T: wt.V128{}, A: wt.I64{}})
	Splat_F32X4   = _add(Def{Class: Vector, Name: "splat.f32x4", Op: Op_Splat_F32X4, T: wt.V128{}, A: wt.F32{}})
	Splat_F64X2   = _add(Def{Class: Vector, Name: "splat.f64x2", Op: Op_Splat_F64X2, T: wt.V128{}, A: wt.F64{}})

	Eq_I8X16  = _add(Def{Class: Vector, Name: "eq.i8x16", Op: Op_Eq_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Ne_I8X16  = _add(Def{Class: Vector, Name: "ne.i8x16", Op: Op_Ne_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LtS_I8X16 = _add(Def{Class: Vector, Name: "lt_s.i8x16", Op: Op_LtS_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LtU_I8X16 = _add(Def{Class: Vector, Name: "lt_u.i8x16", Op: Op_LtU_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GtS_I8X16 = _add(Def{Class: Vector, Name: "gt_s.i8x16", Op: Op_GtS_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GtU_I8X16 = _add(Def{Class: Vector, Name: "gt_u.i8x16", Op: Op_GtU_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LeS_I8X16 = _add(Def{Class: Vector, Name: "le_s.i8x16", Op: Op_LeS_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LeU_I8X16 = _add(Def{Class: Vector, Name: "le_u.i8x16", Op: Op_LeU_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GeS_I8X16 = _add(Def{Class: Vector, Name: "ge_s.i8x16", Op: Op_GeS_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GeU_I8X16 = _add(Def{Class: Vector, Name: "ge_u.i8x16", Op: Op_GeU_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	Eq_I16X8  = _add(Def{Class: Vector, Name: "eq.i16x8", Op: Op_Eq_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Ne_I16X8  = _add(Def{Class: Vector, Name: "ne.i16x8", Op: Op_Ne_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LtS_I16X8 = _add(Def{Class: Vector, Name: "lt_s.i16x8", Op: Op_LtS_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LtU_I16X8 = _add(Def{Class: Vector, Name: "lt_u.i16x8", Op: Op_LtU_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GtS_I16X8 = _add(Def{Class: Vector, Name: "gt_s.i16x8", Op: Op_GtS_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GtU_I16X8 = _add(Def{Class: Vector, Name: "gt_u.i16x8", Op: Op_GtU_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LeS_I16X8 = _add(Def{Class: Vector, Name: "le_s.i16x8", Op: Op_LeS_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LeU_I16X8 = _add(Def{Class: Vector, Name: "le_u.i16x8", Op: Op_LeU_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GeS_I16X8 = _add(Def{Class: Vector, Name: "ge_s.i16x8", Op: Op_GeS_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GeU_I16X8 = _add(Def{Class: Vector, Name: "ge_u.i16x8", Op: Op_GeU_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	Eq_I32X4  = _add(Def{Class: Vector, Name: "eq.i32x4", Op: Op_Eq_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Ne_I32X4  = _add(Def{Class: Vector, Name: "ne.i32x4", Op: Op_Ne_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LtS_I32X4 = _add(Def{Class: Vector, Name: "lt_s.i32x4", Op: Op_LtS_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LtU_I32X4 = _add(Def{Class: Vector, Name: "lt_u.i32x4", Op: Op_LtU_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GtS_I32X4 = _add(Def{Class: Vector, Name: "gt_s.i32x4", Op: Op_GtS_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GtU_I32X4 = _add(Def{Class: Vector, Name: "gt_u.i32x4", Op: Op_GtU_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LeS_I32X4 = _add(Def{Class: Vector, Name: "le_s.i32x4", Op: Op_LeS_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LeU_I32X4 = _add(Def{Class: Vector, Name: "le_u.i32x4", Op: Op_LeU_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GeS_I32X4 = _add(Def{Class: Vector, Name: "ge_s.i32x4", Op: Op_GeS_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GeU_I32X4 = _add(Def{Class: Vector, Name: "ge_u.i32x4", Op: Op_GeU_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	Eq_I64X2  = _add(Def{Class: Vector, Name: "eq.i64x2", Op: Op_Eq_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Ne_I64X2  = _add(Def{Class: Vector, Name: "ne.i64x2", Op: Op_Ne_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LtS_I64X2 = _add(Def{Class: Vector, Name: "lt_s.i64x2", Op: Op_LtS_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GtS_I64X2 = _add(Def{Class: Vector, Name: "gt_s.i64x2", Op: Op_GtS_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	LeS_I64X2 = _add(Def{Class: Vector, Name: "le_s.i64x2", Op: Op_LeS_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	GeS_I64X2 = _add(Def{Class: Vector, Name: "ge_s.i64x2", Op: Op_GeS_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	Eq_F32X4 = _add(Def{Class: Vector, Name: "eq.f32x4", Op: Op_Eq_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Ne_F32X4 = _add(Def{Class: Vector, Name: "ne.f32x4", Op: Op_Ne_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Lt_F32X4 = _add(Def{Class: Vector, Name: "lt.f32x4", Op: Op_Lt_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Gt_F32X4 = _add(Def{Class: Vector, Name: "gt.f32x4", Op: Op_Gt_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Le_F32X4 = _add(Def{Class: Vector, Name: "le.f32x4", Op: Op_Le_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Ge_F32X4 = _add(Def{Class: Vector, Name: "ge.f32x4", Op: Op_Ge_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	Eq_F64X2 = _add(Def{Class: Vector, Name: "eq.f64x2", Op: Op_Eq_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Ne_F64X2 = _add(Def{Class: Vector, Name: "ne.f64x2", Op: Op_Ne_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Lt_F64X2 = _add(Def{Class: Vector, Name: "lt.f64x2", Op: Op_Lt_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Gt_F64X2 = _add(Def{Class: Vector, Name: "gt.f64x2", Op: Op_Gt_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Le_F64X2 = _add(Def{Class: Vector, Name: "le.f64x2", Op: Op_Le_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Ge_F64X2 = _add(Def{Class: Vector, Name: "ge.f64x2", Op: Op_Ge_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	Not_v128       = _add(Def{Class: Vector, Name: "not.v128", Op: Op_Not_v128, T: wt.V128{}, A: wt.V128{}})
	And_v128       = _add(Def{Class: Vector, Name: "and.v128", Op: Op_And_v128, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Andnot_v128    = _add(Def{Class: Vector, Name: "andnot.v128", Op: Op_Andnot_v128, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Or_v128        = _add(Def{Class: Vector, Name: "or.v128", Op: Op_Or_v128, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Xor_v128       = _add(Def{Class: Vector, Name: "xor.v128", Op: Op_Xor_v128, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Bitselect_v128 = _add(Def{Class: Vector, Name: "bitselect.v128", Op: Op_Bitselect_v128, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}, C: wt.V128{}})
	AnyTrue_v128   = _add(Def{Class: Vector, Name: "any_true.v128", Op: Op_AnyTrue_v128, T: wt.I32{}, A: wt.V128{}})

	Abs_I8X16          = _add(Def{Class: Vector, Name: "abs.i8x16", Op: Op_Abs_I8X16, T: wt.V128{}, A: wt.V128{}})
	Neg_I8X16          = _add(Def{Class: Vector, Name: "neg.i8x16", Op: Op_Neg_I8X16, T: wt.V128{}, A: wt.V128{}})
	Popcnt_I8X16       = _add(Def{Class: Vector, Name: "popcnt.i8x16", Op: Op_Popcnt_I8X16, T: wt.V128{}, A: wt.V128{}})
	AllTrue_I8X16      = _add(Def{Class: Vector, Name: "all_true.i8x16", Op: Op_AllTrue_I8X16, T: wt.I32{}, A: wt.V128{}})
	Bitmask_I8X16      = _add(Def{Class: Vector, Name: "bitmask.i8x16", Op: Op_Bitmask_I8X16, T: wt.I32{}, A: wt.V128{}})
	NarrowI16X8S_I8X16 = _add(Def{Class: Vector, Name: "narrow_i16x8_s.i8x16", Op: Op_NarrowI16X8S_I8X16, T: wt.V128{}, A: wt.V128{}})
	NarrowI16X8U_I8X16 = _add(Def{Class: Vector, Name: "narrow_i16x8_u.i8x16", Op: Op_NarrowI16X8U_I8X16, T: wt.V128{}, A: wt.V128{}})
	Shl_I8X16          = _add(Def{Class: Vector, Name: "shl.i8x16", Op: Op_Shl_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ShrS_I8X16         = _add(Def{Class: Vector, Name: "shr_s.i8x16", Op: Op_ShrS_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ShrU_I8X16         = _add(Def{Class: Vector, Name: "shr_u.i8x16", Op: Op_ShrU_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	Add_I8X16          = _add(Def{Class: Vector, Name: "add.i8x16", Op: Op_Add_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	AddSatS_I8X16      = _add(Def{Class: Vector, Name: "add_sat_s.i8x16", Op: Op_AddSatS_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	AddSatU_I8X16      = _add(Def{Class: Vector, Name: "add_sat_u.i8x16", Op: Op_AddSatU_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Sub_I8X16          = _add(Def{Class: Vector, Name: "sub.i8x16", Op: Op_Sub_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	SubSatS_I8X16      = _add(Def{Class: Vector, Name: "sub_sat_s.i8x16", Op: Op_SubSatS_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	SubSatU_I8X16      = _add(Def{Class: Vector, Name: "sub_sat_u.i8x16", Op: Op_SubSatU_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	MinS_I8X16         = _add(Def{Class: Vector, Name: "min_s.i8x16", Op: Op_MinS_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	MinU_I8X16         = _add(Def{Class: Vector, Name: "min_u.i8x16", Op: Op_MinU_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	MaxS_I8X16         = _add(Def{Class: Vector, Name: "max_s.i8x16", Op: Op_MaxS_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	MaxU_I8X16         = _add(Def{Class: Vector, Name: "max_u.i8x16", Op: Op_MaxU_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	AvgrU_I8X16        = _add(Def{Class: Vector, Name: "avgr_u.i8x16", Op: Op_AvgrU_I8X16, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	ExtaddPairwiseI8X16S_I16X8 = _add(Def{Class: Vector, Name: "extadd_pairwise_i8x16_s.i16x8", Op: Op_ExtaddPairwiseI8X16S_I16X8, T: wt.V128{}, A: wt.V128{}})
	ExtaddPairwiseI8X16U_I16X8 = _add(Def{Class: Vector, Name: "extadd_pairwise_i8x16_u.i16x8", Op: Op_ExtaddPairwiseI8X16U_I16X8, T: wt.V128{}, A: wt.V128{}})
	Abs_I16X8                  = _add(Def{Class: Vector, Name: "abs.i16x8", Op: Op_Abs_I16X8, T: wt.V128{}, A: wt.V128{}})
	Neg_I16X8                  = _add(Def{Class: Vector, Name: "neg.i16x8", Op: Op_Neg_I16X8, T: wt.V128{}, A: wt.V128{}})
	Q15mulrSatS_I16X8          = _add(Def{Class: Vector, Name: "q15mulr_sat_s.i16x8", Op: Op_Q15mulrSatS_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	AllTrue_I16X8              = _add(Def{Class: Vector, Name: "alltrue.i16x8", Op: Op_AllTrue_I16X8, T: wt.I32{}, A: wt.V128{}})
	Bitmask_I16X8              = _add(Def{Class: Vector, Name: "bitmask.i16x8", Op: Op_Bitmask_I16X8, T: wt.I32{}, A: wt.V128{}})
	NarrowI32X4S_I16X8         = _add(Def{Class: Vector, Name: "narrow_i32x4_s.i16x8", Op: Op_NarrowI32X4S_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	NarrowI32X4U_I16X8         = _add(Def{Class: Vector, Name: "narrow_i32x4_u.i16x8", Op: Op_NarrowI32X4U_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	ExtendLowI8X16S_I16X8      = _add(Def{Class: Vector, Name: "extend_low_i8x16_s.i16x8", Op: Op_ExtendLowI8X16S_I16X8, T: wt.V128{}, A: wt.V128{}})
	ExtendHighI8X16S_I16X8     = _add(Def{Class: Vector, Name: "extend_high_i8x16_s.i16x8", Op: Op_ExtendHighI8X16S_I16X8, T: wt.V128{}, A: wt.V128{}})
	ExtendLowI8X16U_I16X8      = _add(Def{Class: Vector, Name: "extend_low_i8x16_u.i16x8", Op: Op_ExtendLowI8X16U_I16X8, T: wt.V128{}, A: wt.V128{}})
	ExtendHighI8X16U_I16X8     = _add(Def{Class: Vector, Name: "extend_high_i8x16_u.i16x8", Op: Op_ExtendHighI8X16U_I16X8, T: wt.V128{}, A: wt.V128{}})
	Shl_I16X8                  = _add(Def{Class: Vector, Name: "shl.i16x8", Op: Op_Shl_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ShrS_I16X8                 = _add(Def{Class: Vector, Name: "shr_s.i16x8", Op: Op_ShrS_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ShrU_I16X8                 = _add(Def{Class: Vector, Name: "shr_u.i16x8", Op: Op_ShrU_I16X8, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	Add_I16X8                  = _add(Def{Class: Vector, Name: "add.i16x8", Op: Op_Add_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	AddSatS_I16X8              = _add(Def{Class: Vector, Name: "add_sat_s.i16x8", Op: Op_AddSatS_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	AddSatU_I16X8              = _add(Def{Class: Vector, Name: "add_sat_u.i16x8", Op: Op_AddSatU_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	Sub_I16X8                  = _add(Def{Class: Vector, Name: "sub.i16x8", Op: Op_Sub_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	SubSatS_I16X8              = _add(Def{Class: Vector, Name: "sub_sat_s.i16x8", Op: Op_SubSatS_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	SubSatU_I16X8              = _add(Def{Class: Vector, Name: "sub_sat_u.i16x8", Op: Op_SubSatU_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	Mul_I16X8                  = _add(Def{Class: Vector, Name: "mul.i16x8", Op: Op_Mul_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	MinS_I16X8                 = _add(Def{Class: Vector, Name: "min_s.i16x8", Op: Op_MinS_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	MinU_I16X8                 = _add(Def{Class: Vector, Name: "min_u.i16x8", Op: Op_MinU_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	MaxS_I16X8                 = _add(Def{Class: Vector, Name: "max_s.i16x8", Op: Op_MaxS_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	MaxU_I16X8                 = _add(Def{Class: Vector, Name: "max_u.i16x8", Op: Op_MaxU_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	AvgrU_I16X8                = _add(Def{Class: Vector, Name: "avgr_u.i16x8", Op: Op_AvgrU_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulLowI8X16S_I16X8      = _add(Def{Class: Vector, Name: "extmul_low_i8x16_s.i16x8", Op: Op_ExtmulLowI8X16S_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulHighI8X16S_I16X8     = _add(Def{Class: Vector, Name: "extmul_high_i8x16_s.i16x8", Op: Op_ExtmulHighI8X16S_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulLowI8X16U_I16X8      = _add(Def{Class: Vector, Name: "extmul_low_i8x16_u.i16x8", Op: Op_ExtmulLowI8X16U_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulHighI8X16U_I16X8     = _add(Def{Class: Vector, Name: "extmul_high_i8x16_u.i16x8", Op: Op_ExtmulHighI8X16U_I16X8, T: wt.I32{}, A: wt.V128{}, B: wt.V128{}})

	ExtaddPairwiseI16X8S_I32X4 = _add(Def{Class: Vector, Name: "extadd_pairwise_i16x8_s.i32x4", Op: Op_ExtaddPairwiseI16X8S_I32X4, T: wt.V128{}, A: wt.V128{}})
	ExtaddPairwiseI16X8U_I32X4 = _add(Def{Class: Vector, Name: "extadd_pairwise_i16x8_u.i32x4", Op: Op_ExtaddPairwiseI16X8U_I32X4, T: wt.V128{}, A: wt.V128{}})
	Abs_I32X4                  = _add(Def{Class: Vector, Name: "abs.i32x4", Op: Op_Abs_I32X4, T: wt.I32{}, A: wt.V128{}})
	Neg_I32X4                  = _add(Def{Class: Vector, Name: "neg.i32x4", Op: Op_Neg_I32X4, T: wt.I32{}, A: wt.V128{}})
	AllTrue_I32X4              = _add(Def{Class: Vector, Name: "alltrue.i32x4", Op: Op_AllTrue_I32X4, T: wt.I32{}, A: wt.V128{}})
	Bitmask_I32X4              = _add(Def{Class: Vector, Name: "bitmask.i32x4", Op: Op_Bitmask_I32X4, T: wt.I32{}, A: wt.V128{}})
	ExtendLowI16X8S_I32X4      = _add(Def{Class: Vector, Name: "extend_low_i16x8_s.i32x4", Op: Op_ExtendLowI16X8S_I32X4, T: wt.V128{}, A: wt.V128{}})
	ExtendHighI16X8S_I32X4     = _add(Def{Class: Vector, Name: "extend_high_i16x8_s.i32x4", Op: Op_ExtendHighI16X8S_I32X4, T: wt.V128{}, A: wt.V128{}})
	ExtendLowI16X8U_I32X4      = _add(Def{Class: Vector, Name: "extend_low_i16x8_u.i32x4", Op: Op_ExtendLowI16X8U_I32X4, T: wt.V128{}, A: wt.V128{}})
	ExtendHighI16X8U_I32X4     = _add(Def{Class: Vector, Name: "extend_high_i16x8_u.i32x4", Op: Op_ExtendHighI16X8U_I32X4, T: wt.V128{}, A: wt.V128{}})
	Shl_I32X4                  = _add(Def{Class: Vector, Name: "shl.i32x4", Op: Op_Shl_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ShrS_I32X4                 = _add(Def{Class: Vector, Name: "shr_s.i32x4", Op: Op_ShrS_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ShrU_I32X4                 = _add(Def{Class: Vector, Name: "shr_u.i32x4", Op: Op_ShrU_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	Add_I32X4                  = _add(Def{Class: Vector, Name: "add.i32x4", Op: Op_Add_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Sub_I32X4                  = _add(Def{Class: Vector, Name: "sub.i32x4", Op: Op_Sub_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Mul_I32X4                  = _add(Def{Class: Vector, Name: "mul.i32x4", Op: Op_Mul_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	MinS_I32X4                 = _add(Def{Class: Vector, Name: "min_s.i32x4", Op: Op_MinS_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	MinU_I32X4                 = _add(Def{Class: Vector, Name: "min_u.i32x4", Op: Op_MinU_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	MaxS_I32X4                 = _add(Def{Class: Vector, Name: "max_s.i32x4", Op: Op_MaxS_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	MaxU_I32X4                 = _add(Def{Class: Vector, Name: "max_u.i32x4", Op: Op_MaxU_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	DotI16X8S_I32X4            = _add(Def{Class: Vector, Name: "dot_i16x8_s.i32x4", Op: Op_DotI16X8S_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulLowI16X8S_I32X4      = _add(Def{Class: Vector, Name: "extmul_low_i16x8_s.i32x4", Op: Op_ExtmulLowI16X8S_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulHighI16X8S_I32X4     = _add(Def{Class: Vector, Name: "extmul_high_i16x8_s.i32x4", Op: Op_ExtmulHighI16X8S_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulLowI16X8U_I32X4      = _add(Def{Class: Vector, Name: "extmul_low_i16x8_u.i32x4", Op: Op_ExtmulLowI16X8U_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulHighI16X8U_I32X4     = _add(Def{Class: Vector, Name: "extmul_high_i16x8_u.i32x4", Op: Op_ExtmulHighI16X8U_I32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	Abs_I64X2              = _add(Def{Class: Vector, Name: "abs.i64x2", Op: Op_Abs_I64X2, T: wt.V128{}, A: wt.V128{}})
	Neg_I64X2              = _add(Def{Class: Vector, Name: "neg.i64x2", Op: Op_Neg_I64X2, T: wt.V128{}, A: wt.V128{}})
	AllTrue_I64X2          = _add(Def{Class: Vector, Name: "alltrue.i64x2", Op: Op_AllTrue_I64X2, T: wt.I32{}, A: wt.V128{}})
	Bitmask_I64X2          = _add(Def{Class: Vector, Name: "bitmask.i64x2", Op: Op_Bitmask_I64X2, T: wt.I32{}, A: wt.V128{}})
	ExtendLowI32X4S_I64X2  = _add(Def{Class: Vector, Name: "extend_low_i32x4_s.i64x2", Op: Op_ExtendLowI32X4S_I64X2, T: wt.V128{}, A: wt.V128{}})
	ExtendHighI32X4S_I64X2 = _add(Def{Class: Vector, Name: "extend_high_i32x4_s.i64x2", Op: Op_ExtendHighI32X4S_I64X2, T: wt.V128{}, A: wt.V128{}})
	ExtendLowI32X4U_I64X2  = _add(Def{Class: Vector, Name: "extend_low_i32x4_u.i64x2", Op: Op_ExtendLowI32X4U_I64X2, T: wt.V128{}, A: wt.V128{}})
	ExtendHighI32X4U_I64X2 = _add(Def{Class: Vector, Name: "extend_high_i32x4_u.i64x2", Op: Op_ExtendHighI32X4U_I64X2, T: wt.V128{}, A: wt.V128{}})
	Shl_I64X2              = _add(Def{Class: Vector, Name: "shl.i64x2", Op: Op_Shl_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ShrS_I64X2             = _add(Def{Class: Vector, Name: "shr_s.i64x2", Op: Op_ShrS_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	ShrU_I64X2             = _add(Def{Class: Vector, Name: "shr_u.i64x2", Op: Op_ShrU_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.I32{}})
	Add_I64X2              = _add(Def{Class: Vector, Name: "add.i64x2", Op: Op_Add_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Sub_I64X2              = _add(Def{Class: Vector, Name: "sub.i64x2", Op: Op_Sub_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Mul_I64X2              = _add(Def{Class: Vector, Name: "mul.i64x2", Op: Op_Mul_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulLowI32X4S_I64X2  = _add(Def{Class: Vector, Name: "extmul_low_i32x4_s.i64x2", Op: Op_ExtmulLowI32X4S_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulHighI32X4S_I64X2 = _add(Def{Class: Vector, Name: "extmul_high_i32x4_s.i64x2", Op: Op_ExtmulHighI32X4S_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulLowI32X4U_I64X2  = _add(Def{Class: Vector, Name: "extmul_low_i32x4_u.i64x2", Op: Op_ExtmulLowI32X4U_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	ExtmulHighI32X4U_I64X2 = _add(Def{Class: Vector, Name: "extmul_high_i32x4_u.i64x2", Op: Op_ExtmulHighI32X4U_I64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	Ceil_F32X4    = _add(Def{Class: Vector, Name: "ceil.f32x4", Op: Op_Ceil_F32X4, T: wt.V128{}, A: wt.V128{}})
	Floor_F32X4   = _add(Def{Class: Vector, Name: "floor.f32x4", Op: Op_Floor_F32X4, T: wt.V128{}, A: wt.V128{}})
	Trunc_F32X4   = _add(Def{Class: Vector, Name: "trunc.f32x4", Op: Op_Trunc_F32X4, T: wt.V128{}, A: wt.V128{}})
	Nearest_F32X4 = _add(Def{Class: Vector, Name: "nearest.f32x4", Op: Op_Nearest_F32X4, T: wt.V128{}, A: wt.V128{}})
	Abs_F32X4     = _add(Def{Class: Vector, Name: "abs.f32x4", Op: Op_Abs_F32X4, T: wt.V128{}, A: wt.V128{}})
	Neg_F32X4     = _add(Def{Class: Vector, Name: "neg.f32x4", Op: Op_Neg_F32X4, T: wt.V128{}, A: wt.V128{}})
	Sqrt_F32X4    = _add(Def{Class: Vector, Name: "sqrt.f32x4", Op: Op_Sqrt_F32X4, T: wt.V128{}, A: wt.V128{}})
	Add_F32X4     = _add(Def{Class: Vector, Name: "add.f32x4", Op: Op_Add_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Sub_F32X4     = _add(Def{Class: Vector, Name: "sub.f32x4", Op: Op_Sub_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Mul_F32X4     = _add(Def{Class: Vector, Name: "mul.f32x4", Op: Op_Mul_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Div_F32X4     = _add(Def{Class: Vector, Name: "div.f32x4", Op: Op_Div_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Min_F32X4     = _add(Def{Class: Vector, Name: "min.f32x4", Op: Op_Min_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Max_F32X4     = _add(Def{Class: Vector, Name: "max.f32x4", Op: Op_Max_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Pmin_F32X4    = _add(Def{Class: Vector, Name: "pmin.f32x4", Op: Op_Pmin_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Pmax_F32X4    = _add(Def{Class: Vector, Name: "pmax.f32x4", Op: Op_Pmax_F32X4, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	Ceil_F64X2    = _add(Def{Class: Vector, Name: "ceil.f64x2", Op: Op_Ceil_F64X2, T: wt.V128{}, A: wt.V128{}})
	Floor_F64X2   = _add(Def{Class: Vector, Name: "floor.f64x2", Op: Op_Floor_F64X2, T: wt.V128{}, A: wt.V128{}})
	Trunc_F64X2   = _add(Def{Class: Vector, Name: "trunc.f64x2", Op: Op_Trunc_F64X2, T: wt.V128{}, A: wt.V128{}})
	Nearest_F64X2 = _add(Def{Class: Vector, Name: "nearest.f64x2", Op: Op_Nearest_F64X2, T: wt.V128{}, A: wt.V128{}})
	Abs_F64X2     = _add(Def{Class: Vector, Name: "abs.f64x2", Op: Op_Abs_F64X2, T: wt.V128{}, A: wt.V128{}})
	Neg_F64X2     = _add(Def{Class: Vector, Name: "neg.f64x2", Op: Op_Neg_F64X2, T: wt.V128{}, A: wt.V128{}})
	Sqrt_F64X2    = _add(Def{Class: Vector, Name: "sqrt.f64x2", Op: Op_Sqrt_F64X2, T: wt.V128{}, A: wt.V128{}})
	Add_F64X2     = _add(Def{Class: Vector, Name: "add.f64x2", Op: Op_Add_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Sub_F64X2     = _add(Def{Class: Vector, Name: "sub.f64x2", Op: Op_Sub_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Mul_F64X2     = _add(Def{Class: Vector, Name: "mul.f64x2", Op: Op_Mul_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Div_F64X2     = _add(Def{Class: Vector, Name: "div.f64x2", Op: Op_Div_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Min_F64X2     = _add(Def{Class: Vector, Name: "min.f64x2", Op: Op_Min_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Max_F64X2     = _add(Def{Class: Vector, Name: "max.f64x2", Op: Op_Max_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Pmin_F64X2    = _add(Def{Class: Vector, Name: "pmin.f64x2", Op: Op_Pmin_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})
	Pmax_F64X2    = _add(Def{Class: Vector, Name: "pmax.f64x2", Op: Op_Pmax_F64X2, T: wt.V128{}, A: wt.V128{}, B: wt.V128{}})

	TruncSatF32X4S_I32X4      = _add(Def{Class: Vector, Name: "trunc_sat_f32x4_s.i32x4", Op: Op_TruncSatF32X4S_I32X4, T: wt.V128{}, A: wt.V128{}})
	TruncSatF32X4U_I32X4      = _add(Def{Class: Vector, Name: "trunc_sat_f32x4_u.i32x4", Op: Op_TruncSatF32X4U_I32X4, T: wt.V128{}, A: wt.V128{}})
	ConvertI32X4S_F32X4       = _add(Def{Class: Vector, Name: "convert_i32x4_s.f32x4", Op: Op_ConvertI32X4S_F32X4, T: wt.V128{}, A: wt.V128{}})
	ConvertI32X4U_F32X4       = _add(Def{Class: Vector, Name: "convert_i32x4_u.f32x4", Op: Op_ConvertI32X4U_F32X4, T: wt.V128{}, A: wt.V128{}})
	TruncSatF64X2S_Zero_I32X4 = _add(Def{Class: Vector, Name: "trunc_sat_f64x2s_zero.i32x4", Op: Op_TruncSatF64X2S_Zero_I32X4, T: wt.V128{}, A: wt.V128{}})
	TruncSatF64X2U_Zero_I32X4 = _add(Def{Class: Vector, Name: "trunc_sat_f64x2u_zero.i32x4", Op: Op_TruncSatF64X2U_Zero_I32X4, T: wt.V128{}, A: wt.V128{}})
	ConvertLowI32X4S_F64X2    = _add(Def{Class: Vector, Name: "convert_low_i32x4_s.f64x2", Op: Op_ConvertLowI32X4S_F64X2, T: wt.V128{}, A: wt.V128{}})
	ConvertLowI32X4U_F64X2    = _add(Def{Class: Vector, Name: "convert_low_i32x4_u.f64x2", Op: Op_ConvertLowI32X4U_F64X2, T: wt.V128{}, A: wt.V128{}})
	DemoteF64X2Zero_F32X4     = _add(Def{Class: Vector, Name: "demote_f64x2_zero.f32x4", Op: Op_DemoteF64X2Zero_F32X4, T: wt.V128{}, A: wt.V128{}})
	PromoteLowF32X4_F64X2     = _add(Def{Class: Vector, Name: "promote_low_f32x4.f64x2", Op: Op_PromoteLowF32X4_F64X2, T: wt.V128{}, A: wt.V128{}})
)
